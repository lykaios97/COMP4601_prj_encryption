// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gmul_HH_
#define _gmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct gmul : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<3> > a_V;
    sc_in< sc_lv<8> > b_V;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    gmul(sc_module_name name);
    SC_HAS_PROCESS(gmul);

    ~gmul();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > a_V_cast_fu_95_p1;
    sc_signal< sc_lv<4> > i_fu_105_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > select_ln56_fu_121_p3;
    sc_signal< sc_lv<1> > icmp_ln55_fu_99_p2;
    sc_signal< sc_lv<8> > select_ln56_1_fu_129_p3;
    sc_signal< sc_lv<8> > select_ln59_fu_157_p3;
    sc_signal< sc_lv<8> > zext_ln858_fu_175_p1;
    sc_signal< sc_lv<8> > agg_result_V_0_reg_44;
    sc_signal< sc_lv<8> > a_V_buf_0_reg_55;
    sc_signal< sc_lv<8> > b_V_buf_0_reg_64;
    sc_signal< sc_lv<8> > agg_result_V_load_reg_73;
    sc_signal< sc_lv<4> > i_0_reg_84;
    sc_signal< sc_lv<1> > trunc_ln55_fu_117_p1;
    sc_signal< sc_lv<8> > p_V_fu_111_p2;
    sc_signal< sc_lv<8> > shl_ln841_fu_145_p2;
    sc_signal< sc_lv<1> > hi_bit_fu_137_p3;
    sc_signal< sc_lv<8> > xor_ln719_fu_151_p2;
    sc_signal< sc_lv<7> > lshr_ln_fu_165_p4;
    sc_signal< sc_lv<8> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_1B;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_V_cast_fu_95_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_hi_bit_fu_137_p3();
    void thread_i_fu_105_p2();
    void thread_icmp_ln55_fu_99_p2();
    void thread_lshr_ln_fu_165_p4();
    void thread_p_V_fu_111_p2();
    void thread_select_ln56_1_fu_129_p3();
    void thread_select_ln56_fu_121_p3();
    void thread_select_ln59_fu_157_p3();
    void thread_shl_ln841_fu_145_p2();
    void thread_trunc_ln55_fu_117_p1();
    void thread_xor_ln719_fu_151_p2();
    void thread_zext_ln858_fu_175_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
