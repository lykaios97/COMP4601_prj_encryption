// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gmul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gmul::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gmul::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> gmul::ap_ST_fsm_state1 = "1";
const sc_lv<2> gmul::ap_ST_fsm_state2 = "10";
const sc_lv<32> gmul::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> gmul::ap_const_lv32_1 = "1";
const sc_lv<1> gmul::ap_const_lv1_0 = "0";
const sc_lv<8> gmul::ap_const_lv8_0 = "00000000";
const sc_lv<4> gmul::ap_const_lv4_0 = "0000";
const sc_lv<4> gmul::ap_const_lv4_8 = "1000";
const sc_lv<4> gmul::ap_const_lv4_1 = "1";
const sc_lv<32> gmul::ap_const_lv32_7 = "111";
const sc_lv<8> gmul::ap_const_lv8_1 = "1";
const sc_lv<8> gmul::ap_const_lv8_1B = "11011";
const sc_lv<1> gmul::ap_const_lv1_1 = "1";
const bool gmul::ap_const_boolean_1 = true;

gmul::gmul(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_cast_fu_95_p1);
    sensitive << ( a_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_99_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_99_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_99_p2 );
    sensitive << ( agg_result_V_0_reg_44 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_hi_bit_fu_137_p3);
    sensitive << ( a_V_buf_0_reg_55 );

    SC_METHOD(thread_i_fu_105_p2);
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_icmp_ln55_fu_99_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_lshr_ln_fu_165_p4);
    sensitive << ( b_V_buf_0_reg_64 );

    SC_METHOD(thread_p_V_fu_111_p2);
    sensitive << ( a_V_buf_0_reg_55 );
    sensitive << ( agg_result_V_load_reg_73 );

    SC_METHOD(thread_select_ln56_1_fu_129_p3);
    sensitive << ( agg_result_V_load_reg_73 );
    sensitive << ( trunc_ln55_fu_117_p1 );
    sensitive << ( p_V_fu_111_p2 );

    SC_METHOD(thread_select_ln56_fu_121_p3);
    sensitive << ( agg_result_V_0_reg_44 );
    sensitive << ( trunc_ln55_fu_117_p1 );
    sensitive << ( p_V_fu_111_p2 );

    SC_METHOD(thread_select_ln59_fu_157_p3);
    sensitive << ( shl_ln841_fu_145_p2 );
    sensitive << ( hi_bit_fu_137_p3 );
    sensitive << ( xor_ln719_fu_151_p2 );

    SC_METHOD(thread_shl_ln841_fu_145_p2);
    sensitive << ( a_V_buf_0_reg_55 );

    SC_METHOD(thread_trunc_ln55_fu_117_p1);
    sensitive << ( b_V_buf_0_reg_64 );

    SC_METHOD(thread_xor_ln719_fu_151_p2);
    sensitive << ( shl_ln841_fu_145_p2 );

    SC_METHOD(thread_zext_ln858_fu_175_p1);
    sensitive << ( lshr_ln_fu_165_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln55_fu_99_p2 );

    ap_CS_fsm = "01";
    ap_return_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gmul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, a_V_cast_fu_95_p1, "a_V_cast_fu_95_p1");
    sc_trace(mVcdFile, i_fu_105_p2, "i_fu_105_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, select_ln56_fu_121_p3, "select_ln56_fu_121_p3");
    sc_trace(mVcdFile, icmp_ln55_fu_99_p2, "icmp_ln55_fu_99_p2");
    sc_trace(mVcdFile, select_ln56_1_fu_129_p3, "select_ln56_1_fu_129_p3");
    sc_trace(mVcdFile, select_ln59_fu_157_p3, "select_ln59_fu_157_p3");
    sc_trace(mVcdFile, zext_ln858_fu_175_p1, "zext_ln858_fu_175_p1");
    sc_trace(mVcdFile, agg_result_V_0_reg_44, "agg_result_V_0_reg_44");
    sc_trace(mVcdFile, a_V_buf_0_reg_55, "a_V_buf_0_reg_55");
    sc_trace(mVcdFile, b_V_buf_0_reg_64, "b_V_buf_0_reg_64");
    sc_trace(mVcdFile, agg_result_V_load_reg_73, "agg_result_V_load_reg_73");
    sc_trace(mVcdFile, i_0_reg_84, "i_0_reg_84");
    sc_trace(mVcdFile, trunc_ln55_fu_117_p1, "trunc_ln55_fu_117_p1");
    sc_trace(mVcdFile, p_V_fu_111_p2, "p_V_fu_111_p2");
    sc_trace(mVcdFile, shl_ln841_fu_145_p2, "shl_ln841_fu_145_p2");
    sc_trace(mVcdFile, hi_bit_fu_137_p3, "hi_bit_fu_137_p3");
    sc_trace(mVcdFile, xor_ln719_fu_151_p2, "xor_ln719_fu_151_p2");
    sc_trace(mVcdFile, lshr_ln_fu_165_p4, "lshr_ln_fu_165_p4");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

gmul::~gmul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void gmul::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_0))) {
        a_V_buf_0_reg_55 = select_ln59_fu_157_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a_V_buf_0_reg_55 = a_V_cast_fu_95_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_0))) {
        agg_result_V_0_reg_44 = select_ln56_fu_121_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        agg_result_V_0_reg_44 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_0))) {
        agg_result_V_load_reg_73 = select_ln56_1_fu_129_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        agg_result_V_load_reg_73 = ap_const_lv8_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_1))) {
            ap_return_preg = agg_result_V_0_reg_44.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_0))) {
        b_V_buf_0_reg_64 = zext_ln858_fu_175_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        b_V_buf_0_reg_64 = b_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_0))) {
        i_0_reg_84 = i_fu_105_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_84 = ap_const_lv4_0;
    }
}

void gmul::thread_a_V_cast_fu_95_p1() {
    a_V_cast_fu_95_p1 = esl_zext<8,3>(a_V.read());
}

void gmul::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void gmul::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void gmul::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gmul::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gmul::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gmul::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_1))) {
        ap_return = agg_result_V_0_reg_44.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void gmul::thread_hi_bit_fu_137_p3() {
    hi_bit_fu_137_p3 = a_V_buf_0_reg_55.read().range(7, 7);
}

void gmul::thread_i_fu_105_p2() {
    i_fu_105_p2 = (!i_0_reg_84.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_84.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void gmul::thread_icmp_ln55_fu_99_p2() {
    icmp_ln55_fu_99_p2 = (!i_0_reg_84.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_84.read() == ap_const_lv4_8);
}

void gmul::thread_lshr_ln_fu_165_p4() {
    lshr_ln_fu_165_p4 = b_V_buf_0_reg_64.read().range(7, 1);
}

void gmul::thread_p_V_fu_111_p2() {
    p_V_fu_111_p2 = (agg_result_V_load_reg_73.read() ^ a_V_buf_0_reg_55.read());
}

void gmul::thread_select_ln56_1_fu_129_p3() {
    select_ln56_1_fu_129_p3 = (!trunc_ln55_fu_117_p1.read()[0].is_01())? sc_lv<8>(): ((trunc_ln55_fu_117_p1.read()[0].to_bool())? p_V_fu_111_p2.read(): agg_result_V_load_reg_73.read());
}

void gmul::thread_select_ln56_fu_121_p3() {
    select_ln56_fu_121_p3 = (!trunc_ln55_fu_117_p1.read()[0].is_01())? sc_lv<8>(): ((trunc_ln55_fu_117_p1.read()[0].to_bool())? p_V_fu_111_p2.read(): agg_result_V_0_reg_44.read());
}

void gmul::thread_select_ln59_fu_157_p3() {
    select_ln59_fu_157_p3 = (!hi_bit_fu_137_p3.read()[0].is_01())? sc_lv<8>(): ((hi_bit_fu_137_p3.read()[0].to_bool())? xor_ln719_fu_151_p2.read(): shl_ln841_fu_145_p2.read());
}

void gmul::thread_shl_ln841_fu_145_p2() {
    shl_ln841_fu_145_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): a_V_buf_0_reg_55.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void gmul::thread_trunc_ln55_fu_117_p1() {
    trunc_ln55_fu_117_p1 = b_V_buf_0_reg_64.read().range(1-1, 0);
}

void gmul::thread_xor_ln719_fu_151_p2() {
    xor_ln719_fu_151_p2 = (shl_ln841_fu_145_p2.read() ^ ap_const_lv8_1B);
}

void gmul::thread_zext_ln858_fu_175_p1() {
    zext_ln858_fu_175_p1 = esl_zext<8,7>(lshr_ln_fu_165_p4.read());
}

void gmul::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln55_fu_99_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

