// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ShiftRows_HH_
#define _ShiftRows_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ShiftRows : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_V_address0;
    sc_out< sc_logic > state_V_ce0;
    sc_out< sc_logic > state_V_we0;
    sc_out< sc_lv<8> > state_V_d0;
    sc_in< sc_lv<8> > state_V_q0;
    sc_out< sc_lv<4> > state_V_address1;
    sc_out< sc_logic > state_V_ce1;
    sc_out< sc_logic > state_V_we1;
    sc_out< sc_lv<8> > state_V_d1;
    sc_in< sc_lv<8> > state_V_q1;


    // Module declarations
    ShiftRows(sc_module_name name);
    SC_HAS_PROCESS(ShiftRows);

    ~ShiftRows();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > reg_91;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > state_V_addr_reg_185;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln85_fu_96_p2;
    sc_signal< sc_lv<4> > state_V_addr_1_reg_190;
    sc_signal< sc_lv<4> > state_V_addr_2_reg_195;
    sc_signal< sc_lv<4> > state_V_addr_3_reg_200;
    sc_signal< sc_lv<2> > shift_fu_170_p2;
    sc_signal< sc_lv<2> > shift_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > r_fu_176_p2;
    sc_signal< sc_lv<1> > icmp_ln86_fu_164_p2;
    sc_signal< sc_lv<3> > indvars_iv_reg_68;
    sc_signal< sc_lv<2> > shift_0_reg_80;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln87_fu_110_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_121_p3;
    sc_signal< sc_lv<64> > tmp_2_fu_136_p3;
    sc_signal< sc_lv<64> > tmp_3_fu_151_p3;
    sc_signal< sc_lv<5> > tmp_fu_102_p3;
    sc_signal< sc_lv<5> > or_ln321_fu_115_p2;
    sc_signal< sc_lv<5> > or_ln321_1_fu_130_p2;
    sc_signal< sc_lv<5> > or_ln321_2_fu_145_p2;
    sc_signal< sc_lv<3> > zext_ln86_fu_160_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<59> ap_const_lv59_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln85_fu_96_p2();
    void thread_icmp_ln86_fu_164_p2();
    void thread_or_ln321_1_fu_130_p2();
    void thread_or_ln321_2_fu_145_p2();
    void thread_or_ln321_fu_115_p2();
    void thread_r_fu_176_p2();
    void thread_shift_fu_170_p2();
    void thread_state_V_address0();
    void thread_state_V_address1();
    void thread_state_V_ce0();
    void thread_state_V_ce1();
    void thread_state_V_d0();
    void thread_state_V_d1();
    void thread_state_V_we0();
    void thread_state_V_we1();
    void thread_tmp_1_fu_121_p3();
    void thread_tmp_2_fu_136_p3();
    void thread_tmp_3_fu_151_p3();
    void thread_tmp_fu_102_p3();
    void thread_zext_ln86_fu_160_p1();
    void thread_zext_ln87_fu_110_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
