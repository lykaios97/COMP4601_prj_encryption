// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _MixColumns_HH_
#define _MixColumns_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "gmul.h"
#include "aes_top_mux_42_8_bkb.h"

namespace ap_rtl {

struct MixColumns : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_V_address0;
    sc_out< sc_logic > state_V_ce0;
    sc_out< sc_logic > state_V_we0;
    sc_out< sc_lv<8> > state_V_d0;
    sc_in< sc_lv<8> > state_V_q0;
    sc_signal< sc_lv<3> > ap_var_for_const0;
    sc_signal< sc_lv<3> > ap_var_for_const1;


    // Module declarations
    MixColumns(sc_module_name name);
    SC_HAS_PROCESS(MixColumns);

    ~MixColumns();

    sc_trace_file* mVcdFile;

    gmul* grp_gmul_fu_102;
    gmul* grp_gmul_fu_109;
    gmul* grp_gmul_fu_116;
    gmul* grp_gmul_fu_123;
    gmul* grp_gmul_fu_130;
    gmul* grp_gmul_fu_137;
    gmul* grp_gmul_fu_144;
    gmul* grp_gmul_fu_151;
    aes_top_mux_42_8_bkb<1,1,8,8,8,8,2,8>* aes_top_mux_42_8_bkb_U9;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > c_fu_164_p2;
    sc_signal< sc_lv<3> > c_reg_392;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > zext_ln99_fu_170_p1;
    sc_signal< sc_lv<6> > zext_ln99_reg_397;
    sc_signal< sc_lv<1> > icmp_ln97_fu_158_p2;
    sc_signal< sc_lv<3> > r_fu_180_p2;
    sc_signal< sc_lv<3> > r_reg_406;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln99_fu_174_p2;
    sc_signal< sc_lv<2> > trunc_ln321_fu_208_p1;
    sc_signal< sc_lv<2> > trunc_ln321_reg_416;
    sc_signal< sc_lv<8> > ret_V_fu_262_p2;
    sc_signal< sc_lv<8> > ret_V_reg_452;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_gmul_fu_102_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_102_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_109_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_109_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_116_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_116_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_123_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_123_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_130_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_130_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_137_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_137_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_144_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_144_ap_done;
    sc_signal< sc_logic > grp_gmul_fu_151_ap_ready;
    sc_signal< sc_logic > grp_gmul_fu_151_ap_done;
    sc_signal< bool > ap_block_state5_on_subcall_done;
    sc_signal< sc_lv<8> > ret_V_1_fu_278_p2;
    sc_signal< sc_lv<8> > ret_V_1_reg_457;
    sc_signal< sc_lv<8> > ret_V_2_fu_294_p2;
    sc_signal< sc_lv<8> > ret_V_2_reg_462;
    sc_signal< sc_lv<8> > ret_V_3_fu_310_p2;
    sc_signal< sc_lv<8> > ret_V_3_reg_467;
    sc_signal< sc_lv<3> > r_1_fu_322_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_gmul_fu_102_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_102_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_102_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_109_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_109_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_109_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_116_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_116_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_116_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_123_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_123_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_123_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_130_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_130_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_130_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_137_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_137_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_137_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_144_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_144_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_144_ap_return;
    sc_signal< sc_logic > grp_gmul_fu_151_ap_start;
    sc_signal< sc_logic > grp_gmul_fu_151_ap_idle;
    sc_signal< sc_lv<8> > grp_gmul_fu_151_ap_return;
    sc_signal< sc_lv<3> > c_0_reg_69;
    sc_signal< sc_lv<1> > icmp_ln106_fu_316_p2;
    sc_signal< sc_lv<3> > r_0_reg_80;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > r2_0_reg_91;
    sc_signal< sc_logic > grp_gmul_fu_102_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_109_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_116_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_123_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_130_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_137_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_144_ap_start_reg;
    sc_signal< sc_logic > grp_gmul_fu_151_ap_start_reg;
    sc_signal< sc_lv<64> > zext_ln321_1_fu_203_p1;
    sc_signal< sc_lv<64> > zext_ln321_3_fu_345_p1;
    sc_signal< sc_lv<8> > lhs_V_1_fu_32;
    sc_signal< sc_lv<8> > rhs_V_1_fu_36;
    sc_signal< sc_lv<8> > rhs_V_2_fu_40;
    sc_signal< sc_lv<8> > rhs_V_5_fu_44;
    sc_signal< sc_lv<8> > tmp_fu_354_p6;
    sc_signal< sc_lv<5> > tmp_4_fu_186_p3;
    sc_signal< sc_lv<6> > zext_ln321_fu_194_p1;
    sc_signal< sc_lv<6> > add_ln321_fu_198_p2;
    sc_signal< sc_lv<8> > xor_ln1357_1_fu_258_p2;
    sc_signal< sc_lv<8> > xor_ln1357_fu_252_p2;
    sc_signal< sc_lv<8> > xor_ln1357_4_fu_272_p2;
    sc_signal< sc_lv<8> > xor_ln1357_3_fu_268_p2;
    sc_signal< sc_lv<8> > xor_ln1357_7_fu_288_p2;
    sc_signal< sc_lv<8> > xor_ln1357_6_fu_284_p2;
    sc_signal< sc_lv<8> > xor_ln1357_10_fu_304_p2;
    sc_signal< sc_lv<8> > xor_ln1357_9_fu_300_p2;
    sc_signal< sc_lv<5> > tmp_5_fu_328_p3;
    sc_signal< sc_lv<6> > zext_ln321_2_fu_336_p1;
    sc_signal< sc_lv<6> > add_ln321_1_fu_340_p2;
    sc_signal< sc_lv<2> > tmp_fu_354_p5;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_add_ln321_1_fu_340_p2();
    void thread_add_ln321_fu_198_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state5_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_fu_164_p2();
    void thread_grp_gmul_fu_102_ap_start();
    void thread_grp_gmul_fu_109_ap_start();
    void thread_grp_gmul_fu_116_ap_start();
    void thread_grp_gmul_fu_123_ap_start();
    void thread_grp_gmul_fu_130_ap_start();
    void thread_grp_gmul_fu_137_ap_start();
    void thread_grp_gmul_fu_144_ap_start();
    void thread_grp_gmul_fu_151_ap_start();
    void thread_icmp_ln106_fu_316_p2();
    void thread_icmp_ln97_fu_158_p2();
    void thread_icmp_ln99_fu_174_p2();
    void thread_r_1_fu_322_p2();
    void thread_r_fu_180_p2();
    void thread_ret_V_1_fu_278_p2();
    void thread_ret_V_2_fu_294_p2();
    void thread_ret_V_3_fu_310_p2();
    void thread_ret_V_fu_262_p2();
    void thread_state_V_address0();
    void thread_state_V_ce0();
    void thread_state_V_d0();
    void thread_state_V_we0();
    void thread_tmp_4_fu_186_p3();
    void thread_tmp_5_fu_328_p3();
    void thread_tmp_fu_354_p5();
    void thread_trunc_ln321_fu_208_p1();
    void thread_xor_ln1357_10_fu_304_p2();
    void thread_xor_ln1357_1_fu_258_p2();
    void thread_xor_ln1357_3_fu_268_p2();
    void thread_xor_ln1357_4_fu_272_p2();
    void thread_xor_ln1357_6_fu_284_p2();
    void thread_xor_ln1357_7_fu_288_p2();
    void thread_xor_ln1357_9_fu_300_p2();
    void thread_xor_ln1357_fu_252_p2();
    void thread_zext_ln321_1_fu_203_p1();
    void thread_zext_ln321_2_fu_336_p1();
    void thread_zext_ln321_3_fu_345_p1();
    void thread_zext_ln321_fu_194_p1();
    void thread_zext_ln99_fu_170_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
