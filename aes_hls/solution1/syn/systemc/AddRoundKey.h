// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_V_address0;
    sc_out< sc_logic > state_V_ce0;
    sc_out< sc_logic > state_V_we0;
    sc_out< sc_lv<8> > state_V_d0;
    sc_in< sc_lv<8> > state_V_q0;
    sc_out< sc_lv<6> > roundKey_V_address0;
    sc_out< sc_logic > roundKey_V_ce0;
    sc_in< sc_lv<32> > roundKey_V_q0;
    sc_in< sc_lv<8> > roundKey_V_offset;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > trunc_ln1503_fu_81_p1;
    sc_signal< sc_lv<6> > trunc_ln1503_reg_183;
    sc_signal< sc_lv<3> > j_fu_91_p2;
    sc_signal< sc_lv<3> > j_reg_191;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > zext_ln1503_fu_97_p1;
    sc_signal< sc_lv<6> > zext_ln1503_reg_196;
    sc_signal< sc_lv<1> > icmp_ln111_fu_85_p2;
    sc_signal< sc_lv<6> > roundKey_V_addr_reg_201;
    sc_signal< sc_lv<3> > i_fu_117_p2;
    sc_signal< sc_lv<3> > i_reg_209;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > state_V_addr_reg_214;
    sc_signal< sc_lv<1> > icmp_ln112_fu_111_p2;
    sc_signal< sc_lv<2> > trunc_ln113_fu_145_p1;
    sc_signal< sc_lv<2> > trunc_ln113_reg_219;
    sc_signal< sc_lv<3> > j_0_reg_59;
    sc_signal< sc_lv<3> > i_0_reg_70;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln1503_1_fu_106_p1;
    sc_signal< sc_lv<64> > zext_ln719_1_fu_140_p1;
    sc_signal< sc_lv<6> > add_ln1503_fu_101_p2;
    sc_signal< sc_lv<5> > tmp_fu_123_p3;
    sc_signal< sc_lv<6> > zext_ln719_fu_131_p1;
    sc_signal< sc_lv<6> > add_ln719_fu_135_p2;
    sc_signal< sc_lv<5> > shl_ln_fu_149_p3;
    sc_signal< sc_lv<5> > sub_ln113_fu_156_p2;
    sc_signal< sc_lv<32> > zext_ln113_fu_162_p1;
    sc_signal< sc_lv<32> > lshr_ln1503_fu_166_p2;
    sc_signal< sc_lv<8> > trunc_ln1503_1_fu_172_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_18;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1503_fu_101_p2();
    void thread_add_ln719_fu_135_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_117_p2();
    void thread_icmp_ln111_fu_85_p2();
    void thread_icmp_ln112_fu_111_p2();
    void thread_j_fu_91_p2();
    void thread_lshr_ln1503_fu_166_p2();
    void thread_roundKey_V_address0();
    void thread_roundKey_V_ce0();
    void thread_shl_ln_fu_149_p3();
    void thread_state_V_address0();
    void thread_state_V_ce0();
    void thread_state_V_d0();
    void thread_state_V_we0();
    void thread_sub_ln113_fu_156_p2();
    void thread_tmp_fu_123_p3();
    void thread_trunc_ln113_fu_145_p1();
    void thread_trunc_ln1503_1_fu_172_p1();
    void thread_trunc_ln1503_fu_81_p1();
    void thread_zext_ln113_fu_162_p1();
    void thread_zext_ln1503_1_fu_106_p1();
    void thread_zext_ln1503_fu_97_p1();
    void thread_zext_ln719_1_fu_140_p1();
    void thread_zext_ln719_fu_131_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
