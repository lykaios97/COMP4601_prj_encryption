// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<19> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<19> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<19> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<19> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<19> Cipher::ap_ST_fsm_state6 = "100000";
const sc_lv<19> Cipher::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> Cipher::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> Cipher::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> Cipher::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state11 = "10000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state12 = "100000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<19> Cipher::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<32> Cipher::ap_const_lv32_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_11 = "10001";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<5> Cipher::ap_const_lv5_0 = "00000";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_B = "1011";
const sc_lv<32> Cipher::ap_const_lv32_10 = "10000";
const sc_lv<32> Cipher::ap_const_lv32_12 = "10010";
const sc_lv<32> Cipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Cipher::ap_const_lv32_9 = "1001";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_F = "1111";
const sc_lv<8> Cipher::ap_const_lv8_0 = "00000000";
const sc_lv<8> Cipher::ap_const_lv8_28 = "101000";
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<32> Cipher::ap_const_lv32_D = "1101";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const sc_lv<32> Cipher::ap_const_lv32_C = "1100";
const sc_lv<5> Cipher::ap_const_lv5_10 = "10000";
const sc_lv<5> Cipher::ap_const_lv5_1 = "1";
const sc_lv<4> Cipher::ap_const_lv4_A = "1010";
const sc_lv<2> Cipher::ap_const_lv2_0 = "00";
const bool Cipher::ap_const_boolean_1 = true;

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    state_V_U = new Cipher_state_V("state_V_U");
    state_V_U->clk(ap_clk);
    state_V_U->reset(ap_rst);
    state_V_U->address0(state_V_address0);
    state_V_U->ce0(state_V_ce0);
    state_V_U->we0(state_V_we0);
    state_V_U->d0(state_V_d0);
    state_V_U->q0(state_V_q0);
    state_V_U->address1(grp_ShiftRows_fu_153_state_V_address1);
    state_V_U->ce1(state_V_ce1);
    state_V_U->we1(state_V_we1);
    state_V_U->d1(grp_ShiftRows_fu_153_state_V_d1);
    state_V_U->q1(state_V_q1);
    grp_MixColumns_fu_138 = new MixColumns("grp_MixColumns_fu_138");
    grp_MixColumns_fu_138->ap_clk(ap_clk);
    grp_MixColumns_fu_138->ap_rst(ap_rst);
    grp_MixColumns_fu_138->ap_start(grp_MixColumns_fu_138_ap_start);
    grp_MixColumns_fu_138->ap_done(grp_MixColumns_fu_138_ap_done);
    grp_MixColumns_fu_138->ap_idle(grp_MixColumns_fu_138_ap_idle);
    grp_MixColumns_fu_138->ap_ready(grp_MixColumns_fu_138_ap_ready);
    grp_MixColumns_fu_138->state_V_address0(grp_MixColumns_fu_138_state_V_address0);
    grp_MixColumns_fu_138->state_V_ce0(grp_MixColumns_fu_138_state_V_ce0);
    grp_MixColumns_fu_138->state_V_we0(grp_MixColumns_fu_138_state_V_we0);
    grp_MixColumns_fu_138->state_V_d0(grp_MixColumns_fu_138_state_V_d0);
    grp_MixColumns_fu_138->state_V_q0(state_V_q0);
    grp_AddRoundKey_fu_143 = new AddRoundKey("grp_AddRoundKey_fu_143");
    grp_AddRoundKey_fu_143->ap_clk(ap_clk);
    grp_AddRoundKey_fu_143->ap_rst(ap_rst);
    grp_AddRoundKey_fu_143->ap_start(grp_AddRoundKey_fu_143_ap_start);
    grp_AddRoundKey_fu_143->ap_done(grp_AddRoundKey_fu_143_ap_done);
    grp_AddRoundKey_fu_143->ap_idle(grp_AddRoundKey_fu_143_ap_idle);
    grp_AddRoundKey_fu_143->ap_ready(grp_AddRoundKey_fu_143_ap_ready);
    grp_AddRoundKey_fu_143->state_V_address0(grp_AddRoundKey_fu_143_state_V_address0);
    grp_AddRoundKey_fu_143->state_V_ce0(grp_AddRoundKey_fu_143_state_V_ce0);
    grp_AddRoundKey_fu_143->state_V_we0(grp_AddRoundKey_fu_143_state_V_we0);
    grp_AddRoundKey_fu_143->state_V_d0(grp_AddRoundKey_fu_143_state_V_d0);
    grp_AddRoundKey_fu_143->state_V_q0(state_V_q0);
    grp_AddRoundKey_fu_143->roundKey_V_address0(grp_AddRoundKey_fu_143_roundKey_V_address0);
    grp_AddRoundKey_fu_143->roundKey_V_ce0(grp_AddRoundKey_fu_143_roundKey_V_ce0);
    grp_AddRoundKey_fu_143->roundKey_V_q0(w_V_q0);
    grp_AddRoundKey_fu_143->roundKey_V_offset(grp_AddRoundKey_fu_143_roundKey_V_offset);
    grp_ShiftRows_fu_153 = new ShiftRows("grp_ShiftRows_fu_153");
    grp_ShiftRows_fu_153->ap_clk(ap_clk);
    grp_ShiftRows_fu_153->ap_rst(ap_rst);
    grp_ShiftRows_fu_153->ap_start(grp_ShiftRows_fu_153_ap_start);
    grp_ShiftRows_fu_153->ap_done(grp_ShiftRows_fu_153_ap_done);
    grp_ShiftRows_fu_153->ap_idle(grp_ShiftRows_fu_153_ap_idle);
    grp_ShiftRows_fu_153->ap_ready(grp_ShiftRows_fu_153_ap_ready);
    grp_ShiftRows_fu_153->state_V_address0(grp_ShiftRows_fu_153_state_V_address0);
    grp_ShiftRows_fu_153->state_V_ce0(grp_ShiftRows_fu_153_state_V_ce0);
    grp_ShiftRows_fu_153->state_V_we0(grp_ShiftRows_fu_153_state_V_we0);
    grp_ShiftRows_fu_153->state_V_d0(grp_ShiftRows_fu_153_state_V_d0);
    grp_ShiftRows_fu_153->state_V_q0(state_V_q0);
    grp_ShiftRows_fu_153->state_V_address1(grp_ShiftRows_fu_153_state_V_address1);
    grp_ShiftRows_fu_153->state_V_ce1(grp_ShiftRows_fu_153_state_V_ce1);
    grp_ShiftRows_fu_153->state_V_we1(grp_ShiftRows_fu_153_state_V_we1);
    grp_ShiftRows_fu_153->state_V_d1(grp_ShiftRows_fu_153_state_V_d1);
    grp_ShiftRows_fu_153->state_V_q1(state_V_q1);
    grp_SubBytes_fu_158 = new SubBytes("grp_SubBytes_fu_158");
    grp_SubBytes_fu_158->ap_clk(ap_clk);
    grp_SubBytes_fu_158->ap_rst(ap_rst);
    grp_SubBytes_fu_158->ap_start(grp_SubBytes_fu_158_ap_start);
    grp_SubBytes_fu_158->ap_done(grp_SubBytes_fu_158_ap_done);
    grp_SubBytes_fu_158->ap_idle(grp_SubBytes_fu_158_ap_idle);
    grp_SubBytes_fu_158->ap_ready(grp_SubBytes_fu_158_ap_ready);
    grp_SubBytes_fu_158->state_V_address0(grp_SubBytes_fu_158_state_V_address0);
    grp_SubBytes_fu_158->state_V_ce0(grp_SubBytes_fu_158_state_V_ce0);
    grp_SubBytes_fu_158->state_V_we0(grp_SubBytes_fu_158_state_V_we0);
    grp_SubBytes_fu_158->state_V_d0(grp_SubBytes_fu_158_state_V_d0);
    grp_SubBytes_fu_158->state_V_q0(state_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( icmp_ln165_fu_232_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( icmp_ln165_fu_232_p2 );

    SC_METHOD(thread_grp_AddRoundKey_fu_143_ap_start);
    sensitive << ( grp_AddRoundKey_fu_143_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_143_roundKey_V_offset);
    sensitive << ( zext_ln158_reg_302 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_grp_MixColumns_fu_138_ap_start);
    sensitive << ( grp_MixColumns_fu_138_ap_start_reg );

    SC_METHOD(thread_grp_ShiftRows_fu_153_ap_start);
    sensitive << ( grp_ShiftRows_fu_153_ap_start_reg );

    SC_METHOD(thread_grp_SubBytes_fu_158_ap_start);
    sensitive << ( grp_SubBytes_fu_158_ap_start_reg );

    SC_METHOD(thread_i_1_fu_238_p2);
    sensitive << ( i4_0_reg_126 );

    SC_METHOD(thread_i_fu_171_p2);
    sensitive << ( i_0_reg_103 );

    SC_METHOD(thread_icmp_ln149_fu_165_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_103 );

    SC_METHOD(thread_icmp_ln154_fu_207_p2);
    sensitive << ( round_0_reg_114 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_ln165_fu_232_p2);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( i4_0_reg_126 );

    SC_METHOD(thread_in_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln150_fu_191_p1 );

    SC_METHOD(thread_in_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_address0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( zext_ln166_fu_271_p1 );

    SC_METHOD(thread_out_V_ce0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_out_V_d0);
    sensitive << ( state_V_q0 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_out_V_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_round_fu_226_p2);
    sensitive << ( round_0_reg_114 );

    SC_METHOD(thread_shl_ln_fu_213_p3);
    sensitive << ( round_0_reg_114 );

    SC_METHOD(thread_state_V_address0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_MixColumns_fu_138_state_V_address0 );
    sensitive << ( grp_AddRoundKey_fu_143_state_V_address0 );
    sensitive << ( grp_ShiftRows_fu_153_state_V_address0 );
    sensitive << ( grp_SubBytes_fu_158_state_V_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( zext_ln321_fu_202_p1 );
    sensitive << ( zext_ln321_2_fu_266_p1 );

    SC_METHOD(thread_state_V_ce0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_MixColumns_fu_138_state_V_ce0 );
    sensitive << ( grp_AddRoundKey_fu_143_state_V_ce0 );
    sensitive << ( grp_ShiftRows_fu_153_state_V_ce0 );
    sensitive << ( grp_SubBytes_fu_158_state_V_ce0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_V_ce1);
    sensitive << ( grp_ShiftRows_fu_153_state_V_ce1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_state_V_d0);
    sensitive << ( in_V_q0 );
    sensitive << ( grp_MixColumns_fu_138_state_V_d0 );
    sensitive << ( grp_AddRoundKey_fu_143_state_V_d0 );
    sensitive << ( grp_ShiftRows_fu_153_state_V_d0 );
    sensitive << ( grp_SubBytes_fu_158_state_V_d0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_V_we0);
    sensitive << ( grp_MixColumns_fu_138_state_V_we0 );
    sensitive << ( grp_AddRoundKey_fu_143_state_V_we0 );
    sensitive << ( grp_ShiftRows_fu_153_state_V_we0 );
    sensitive << ( grp_SubBytes_fu_158_state_V_we0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_state_V_we1);
    sensitive << ( grp_ShiftRows_fu_153_state_V_we1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_tmp_6_fu_196_p3);
    sensitive << ( trunc_ln150_1_reg_284 );
    sensitive << ( trunc_ln321_reg_289 );

    SC_METHOD(thread_tmp_8_fu_258_p3);
    sensitive << ( trunc_ln321_2_fu_254_p1 );
    sensitive << ( trunc_ln166_1_fu_244_p4 );

    SC_METHOD(thread_trunc_ln166_1_fu_244_p4);
    sensitive << ( i4_0_reg_126 );

    SC_METHOD(thread_trunc_ln321_2_fu_254_p1);
    sensitive << ( i4_0_reg_126 );

    SC_METHOD(thread_trunc_ln321_fu_187_p1);
    sensitive << ( i_0_reg_103 );

    SC_METHOD(thread_w_V_address0);
    sensitive << ( grp_AddRoundKey_fu_143_roundKey_V_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_w_V_ce0);
    sensitive << ( grp_AddRoundKey_fu_143_roundKey_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_zext_ln150_fu_191_p1);
    sensitive << ( i_0_reg_103 );

    SC_METHOD(thread_zext_ln158_fu_221_p1);
    sensitive << ( shl_ln_fu_213_p3 );

    SC_METHOD(thread_zext_ln166_fu_271_p1);
    sensitive << ( i4_0_reg_126 );

    SC_METHOD(thread_zext_ln321_2_fu_266_p1);
    sensitive << ( tmp_8_fu_258_p3 );

    SC_METHOD(thread_zext_ln321_fu_202_p1);
    sensitive << ( tmp_6_fu_196_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln149_fu_165_p2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( icmp_ln165_fu_232_p2 );
    sensitive << ( grp_MixColumns_fu_138_ap_done );
    sensitive << ( grp_AddRoundKey_fu_143_ap_done );
    sensitive << ( grp_ShiftRows_fu_153_ap_done );
    sensitive << ( grp_SubBytes_fu_158_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln154_fu_207_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );

    ap_CS_fsm = "0000000000000000001";
    grp_MixColumns_fu_138_ap_start_reg = SC_LOGIC_0;
    grp_AddRoundKey_fu_143_ap_start_reg = SC_LOGIC_0;
    grp_ShiftRows_fu_153_ap_start_reg = SC_LOGIC_0;
    grp_SubBytes_fu_158_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_address0, "(port)in_V_address0");
    sc_trace(mVcdFile, in_V_ce0, "(port)in_V_ce0");
    sc_trace(mVcdFile, in_V_q0, "(port)in_V_q0");
    sc_trace(mVcdFile, out_V_address0, "(port)out_V_address0");
    sc_trace(mVcdFile, out_V_ce0, "(port)out_V_ce0");
    sc_trace(mVcdFile, out_V_we0, "(port)out_V_we0");
    sc_trace(mVcdFile, out_V_d0, "(port)out_V_d0");
    sc_trace(mVcdFile, w_V_address0, "(port)w_V_address0");
    sc_trace(mVcdFile, w_V_ce0, "(port)w_V_ce0");
    sc_trace(mVcdFile, w_V_q0, "(port)w_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_171_p2, "i_fu_171_p2");
    sc_trace(mVcdFile, i_reg_279, "i_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, trunc_ln150_1_reg_284, "trunc_ln150_1_reg_284");
    sc_trace(mVcdFile, icmp_ln149_fu_165_p2, "icmp_ln149_fu_165_p2");
    sc_trace(mVcdFile, trunc_ln321_fu_187_p1, "trunc_ln321_fu_187_p1");
    sc_trace(mVcdFile, trunc_ln321_reg_289, "trunc_ln321_reg_289");
    sc_trace(mVcdFile, zext_ln158_fu_221_p1, "zext_ln158_fu_221_p1");
    sc_trace(mVcdFile, zext_ln158_reg_302, "zext_ln158_reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, round_fu_226_p2, "round_fu_226_p2");
    sc_trace(mVcdFile, round_reg_307, "round_reg_307");
    sc_trace(mVcdFile, i_1_fu_238_p2, "i_1_fu_238_p2");
    sc_trace(mVcdFile, i_1_reg_315, "i_1_reg_315");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, icmp_ln165_fu_232_p2, "icmp_ln165_fu_232_p2");
    sc_trace(mVcdFile, state_V_address0, "state_V_address0");
    sc_trace(mVcdFile, state_V_ce0, "state_V_ce0");
    sc_trace(mVcdFile, state_V_we0, "state_V_we0");
    sc_trace(mVcdFile, state_V_d0, "state_V_d0");
    sc_trace(mVcdFile, state_V_q0, "state_V_q0");
    sc_trace(mVcdFile, state_V_ce1, "state_V_ce1");
    sc_trace(mVcdFile, state_V_we1, "state_V_we1");
    sc_trace(mVcdFile, state_V_q1, "state_V_q1");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_ap_start, "grp_MixColumns_fu_138_ap_start");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_ap_done, "grp_MixColumns_fu_138_ap_done");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_ap_idle, "grp_MixColumns_fu_138_ap_idle");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_ap_ready, "grp_MixColumns_fu_138_ap_ready");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_state_V_address0, "grp_MixColumns_fu_138_state_V_address0");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_state_V_ce0, "grp_MixColumns_fu_138_state_V_ce0");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_state_V_we0, "grp_MixColumns_fu_138_state_V_we0");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_state_V_d0, "grp_MixColumns_fu_138_state_V_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_ap_start, "grp_AddRoundKey_fu_143_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_ap_done, "grp_AddRoundKey_fu_143_ap_done");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_ap_idle, "grp_AddRoundKey_fu_143_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_ap_ready, "grp_AddRoundKey_fu_143_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_state_V_address0, "grp_AddRoundKey_fu_143_state_V_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_state_V_ce0, "grp_AddRoundKey_fu_143_state_V_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_state_V_we0, "grp_AddRoundKey_fu_143_state_V_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_state_V_d0, "grp_AddRoundKey_fu_143_state_V_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_roundKey_V_address0, "grp_AddRoundKey_fu_143_roundKey_V_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_roundKey_V_ce0, "grp_AddRoundKey_fu_143_roundKey_V_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_roundKey_V_offset, "grp_AddRoundKey_fu_143_roundKey_V_offset");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_ap_start, "grp_ShiftRows_fu_153_ap_start");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_ap_done, "grp_ShiftRows_fu_153_ap_done");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_ap_idle, "grp_ShiftRows_fu_153_ap_idle");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_ap_ready, "grp_ShiftRows_fu_153_ap_ready");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_address0, "grp_ShiftRows_fu_153_state_V_address0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_ce0, "grp_ShiftRows_fu_153_state_V_ce0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_we0, "grp_ShiftRows_fu_153_state_V_we0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_d0, "grp_ShiftRows_fu_153_state_V_d0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_address1, "grp_ShiftRows_fu_153_state_V_address1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_ce1, "grp_ShiftRows_fu_153_state_V_ce1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_we1, "grp_ShiftRows_fu_153_state_V_we1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_state_V_d1, "grp_ShiftRows_fu_153_state_V_d1");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_ap_start, "grp_SubBytes_fu_158_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_ap_done, "grp_SubBytes_fu_158_ap_done");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_ap_idle, "grp_SubBytes_fu_158_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_ap_ready, "grp_SubBytes_fu_158_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_state_V_address0, "grp_SubBytes_fu_158_state_V_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_state_V_ce0, "grp_SubBytes_fu_158_state_V_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_state_V_we0, "grp_SubBytes_fu_158_state_V_we0");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_state_V_d0, "grp_SubBytes_fu_158_state_V_d0");
    sc_trace(mVcdFile, i_0_reg_103, "i_0_reg_103");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, round_0_reg_114, "round_0_reg_114");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i4_0_reg_126, "i4_0_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_MixColumns_fu_138_ap_start_reg, "grp_MixColumns_fu_138_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_143_ap_start_reg, "grp_AddRoundKey_fu_143_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_ShiftRows_fu_153_ap_start_reg, "grp_ShiftRows_fu_153_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_SubBytes_fu_158_ap_start_reg, "grp_SubBytes_fu_158_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln154_fu_207_p2, "icmp_ln154_fu_207_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, zext_ln150_fu_191_p1, "zext_ln150_fu_191_p1");
    sc_trace(mVcdFile, zext_ln321_fu_202_p1, "zext_ln321_fu_202_p1");
    sc_trace(mVcdFile, zext_ln321_2_fu_266_p1, "zext_ln321_2_fu_266_p1");
    sc_trace(mVcdFile, zext_ln166_fu_271_p1, "zext_ln166_fu_271_p1");
    sc_trace(mVcdFile, tmp_6_fu_196_p3, "tmp_6_fu_196_p3");
    sc_trace(mVcdFile, shl_ln_fu_213_p3, "shl_ln_fu_213_p3");
    sc_trace(mVcdFile, trunc_ln321_2_fu_254_p1, "trunc_ln321_2_fu_254_p1");
    sc_trace(mVcdFile, trunc_ln166_1_fu_244_p4, "trunc_ln166_1_fu_244_p4");
    sc_trace(mVcdFile, tmp_8_fu_258_p3, "tmp_8_fu_258_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete state_V_U;
    delete grp_MixColumns_fu_138;
    delete grp_AddRoundKey_fu_143;
    delete grp_ShiftRows_fu_153;
    delete grp_SubBytes_fu_158;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_143_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(icmp_ln149_fu_165_p2.read(), ap_const_lv1_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
            grp_AddRoundKey_fu_143_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_143_ap_ready.read())) {
            grp_AddRoundKey_fu_143_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_MixColumns_fu_138_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            grp_MixColumns_fu_138_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MixColumns_fu_138_ap_ready.read())) {
            grp_MixColumns_fu_138_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_ShiftRows_fu_153_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
            grp_ShiftRows_fu_153_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_ShiftRows_fu_153_ap_ready.read())) {
            grp_ShiftRows_fu_153_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_SubBytes_fu_158_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln154_fu_207_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln154_fu_207_p2.read())))) {
            grp_SubBytes_fu_158_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_158_ap_ready.read())) {
            grp_SubBytes_fu_158_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i4_0_reg_126 = i_1_reg_315.read();
    } else if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_143_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        i4_0_reg_126 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_103 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_103 = i_reg_279.read();
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_143_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            round_0_reg_114 = round_reg_307.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            round_0_reg_114 = ap_const_lv4_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i_1_reg_315 = i_1_fu_238_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_279 = i_fu_171_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        round_reg_307 = round_fu_226_p2.read();
        zext_ln158_reg_302 = zext_ln158_fu_221_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln149_fu_165_p2.read(), ap_const_lv1_0))) {
        trunc_ln150_1_reg_284 = i_0_reg_103.read().range(3, 2);
        trunc_ln321_reg_289 = trunc_ln321_fu_187_p1.read();
    }
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Cipher::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Cipher::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Cipher::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Cipher::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Cipher::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Cipher::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Cipher::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Cipher::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Cipher::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Cipher::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(icmp_ln165_fu_232_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(icmp_ln165_fu_232_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_grp_AddRoundKey_fu_143_ap_start() {
    grp_AddRoundKey_fu_143_ap_start = grp_AddRoundKey_fu_143_ap_start_reg.read();
}

void Cipher::thread_grp_AddRoundKey_fu_143_roundKey_V_offset() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_143_roundKey_V_offset = ap_const_lv8_28;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_AddRoundKey_fu_143_roundKey_V_offset = zext_ln158_reg_302.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_AddRoundKey_fu_143_roundKey_V_offset = ap_const_lv8_0;
    } else {
        grp_AddRoundKey_fu_143_roundKey_V_offset = "XXXXXXXX";
    }
}

void Cipher::thread_grp_MixColumns_fu_138_ap_start() {
    grp_MixColumns_fu_138_ap_start = grp_MixColumns_fu_138_ap_start_reg.read();
}

void Cipher::thread_grp_ShiftRows_fu_153_ap_start() {
    grp_ShiftRows_fu_153_ap_start = grp_ShiftRows_fu_153_ap_start_reg.read();
}

void Cipher::thread_grp_SubBytes_fu_158_ap_start() {
    grp_SubBytes_fu_158_ap_start = grp_SubBytes_fu_158_ap_start_reg.read();
}

void Cipher::thread_i_1_fu_238_p2() {
    i_1_fu_238_p2 = (!i4_0_reg_126.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i4_0_reg_126.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Cipher::thread_i_fu_171_p2() {
    i_fu_171_p2 = (!i_0_reg_103.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_103.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Cipher::thread_icmp_ln149_fu_165_p2() {
    icmp_ln149_fu_165_p2 = (!i_0_reg_103.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_103.read() == ap_const_lv5_10);
}

void Cipher::thread_icmp_ln154_fu_207_p2() {
    icmp_ln154_fu_207_p2 = (!round_0_reg_114.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_0_reg_114.read() == ap_const_lv4_A);
}

void Cipher::thread_icmp_ln165_fu_232_p2() {
    icmp_ln165_fu_232_p2 = (!i4_0_reg_126.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i4_0_reg_126.read() == ap_const_lv5_10);
}

void Cipher::thread_in_V_address0() {
    in_V_address0 =  (sc_lv<4>) (zext_ln150_fu_191_p1.read());
}

void Cipher::thread_in_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_V_ce0 = ap_const_logic_1;
    } else {
        in_V_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_out_V_address0() {
    out_V_address0 =  (sc_lv<4>) (zext_ln166_fu_271_p1.read());
}

void Cipher::thread_out_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_V_ce0 = ap_const_logic_1;
    } else {
        out_V_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_out_V_d0() {
    out_V_d0 = state_V_q0.read();
}

void Cipher::thread_out_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_V_we0 = ap_const_logic_1;
    } else {
        out_V_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_round_fu_226_p2() {
    round_fu_226_p2 = (!round_0_reg_114.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_0_reg_114.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_shl_ln_fu_213_p3() {
    shl_ln_fu_213_p3 = esl_concat<4,2>(round_0_reg_114.read(), ap_const_lv2_0);
}

void Cipher::thread_state_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_V_address0 =  (sc_lv<4>) (zext_ln321_2_fu_266_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_address0 =  (sc_lv<4>) (zext_ln321_fu_202_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_V_address0 = grp_SubBytes_fu_158_state_V_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_V_address0 = grp_ShiftRows_fu_153_state_V_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_V_address0 = grp_AddRoundKey_fu_143_state_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_address0 = grp_MixColumns_fu_138_state_V_address0.read();
    } else {
        state_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        state_V_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_V_ce0 = grp_SubBytes_fu_158_state_V_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_V_ce0 = grp_ShiftRows_fu_153_state_V_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_V_ce0 = grp_AddRoundKey_fu_143_state_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_ce0 = grp_MixColumns_fu_138_state_V_ce0.read();
    } else {
        state_V_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_V_ce1 = grp_ShiftRows_fu_153_state_V_ce1.read();
    } else {
        state_V_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_state_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_d0 = in_V_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_V_d0 = grp_SubBytes_fu_158_state_V_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_V_d0 = grp_ShiftRows_fu_153_state_V_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_V_d0 = grp_AddRoundKey_fu_143_state_V_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_d0 = grp_MixColumns_fu_138_state_V_d0.read();
    } else {
        state_V_d0 = "XXXXXXXX";
    }
}

void Cipher::thread_state_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        state_V_we0 = grp_SubBytes_fu_158_state_V_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_V_we0 = grp_ShiftRows_fu_153_state_V_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_V_we0 = grp_AddRoundKey_fu_143_state_V_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_we0 = grp_MixColumns_fu_138_state_V_we0.read();
    } else {
        state_V_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_V_we1 = grp_ShiftRows_fu_153_state_V_we1.read();
    } else {
        state_V_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_tmp_6_fu_196_p3() {
    tmp_6_fu_196_p3 = esl_concat<2,2>(trunc_ln321_reg_289.read(), trunc_ln150_1_reg_284.read());
}

void Cipher::thread_tmp_8_fu_258_p3() {
    tmp_8_fu_258_p3 = esl_concat<2,2>(trunc_ln321_2_fu_254_p1.read(), trunc_ln166_1_fu_244_p4.read());
}

void Cipher::thread_trunc_ln166_1_fu_244_p4() {
    trunc_ln166_1_fu_244_p4 = i4_0_reg_126.read().range(3, 2);
}

void Cipher::thread_trunc_ln321_2_fu_254_p1() {
    trunc_ln321_2_fu_254_p1 = i4_0_reg_126.read().range(2-1, 0);
}

void Cipher::thread_trunc_ln321_fu_187_p1() {
    trunc_ln321_fu_187_p1 = i_0_reg_103.read().range(2-1, 0);
}

void Cipher::thread_w_V_address0() {
    w_V_address0 = grp_AddRoundKey_fu_143_roundKey_V_address0.read();
}

void Cipher::thread_w_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        w_V_ce0 = grp_AddRoundKey_fu_143_roundKey_V_ce0.read();
    } else {
        w_V_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_zext_ln150_fu_191_p1() {
    zext_ln150_fu_191_p1 = esl_zext<64,5>(i_0_reg_103.read());
}

void Cipher::thread_zext_ln158_fu_221_p1() {
    zext_ln158_fu_221_p1 = esl_zext<8,6>(shl_ln_fu_213_p3.read());
}

void Cipher::thread_zext_ln166_fu_271_p1() {
    zext_ln166_fu_271_p1 = esl_zext<64,5>(i4_0_reg_126.read());
}

void Cipher::thread_zext_ln321_2_fu_266_p1() {
    zext_ln321_2_fu_266_p1 = esl_zext<64,4>(tmp_8_fu_258_p3.read());
}

void Cipher::thread_zext_ln321_fu_202_p1() {
    zext_ln321_fu_202_p1 = esl_zext<64,4>(tmp_6_fu_196_p3.read());
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln149_fu_165_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_143_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln154_fu_207_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_158_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_153_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_138_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_143_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_158_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_153_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_143_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(icmp_ln165_fu_232_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

