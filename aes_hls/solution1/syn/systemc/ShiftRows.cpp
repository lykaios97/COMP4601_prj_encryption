// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ShiftRows.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ShiftRows::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ShiftRows::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> ShiftRows::ap_ST_fsm_state1 = "1";
const sc_lv<6> ShiftRows::ap_ST_fsm_state2 = "10";
const sc_lv<6> ShiftRows::ap_ST_fsm_state3 = "100";
const sc_lv<6> ShiftRows::ap_ST_fsm_state4 = "1000";
const sc_lv<6> ShiftRows::ap_ST_fsm_state5 = "10000";
const sc_lv<6> ShiftRows::ap_ST_fsm_state6 = "100000";
const sc_lv<32> ShiftRows::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ShiftRows::ap_const_lv32_3 = "11";
const sc_lv<32> ShiftRows::ap_const_lv32_4 = "100";
const sc_lv<32> ShiftRows::ap_const_lv32_1 = "1";
const sc_lv<1> ShiftRows::ap_const_lv1_0 = "0";
const sc_lv<32> ShiftRows::ap_const_lv32_2 = "10";
const sc_lv<1> ShiftRows::ap_const_lv1_1 = "1";
const sc_lv<3> ShiftRows::ap_const_lv3_1 = "1";
const sc_lv<32> ShiftRows::ap_const_lv32_5 = "101";
const sc_lv<2> ShiftRows::ap_const_lv2_0 = "00";
const sc_lv<3> ShiftRows::ap_const_lv3_4 = "100";
const sc_lv<5> ShiftRows::ap_const_lv5_1 = "1";
const sc_lv<59> ShiftRows::ap_const_lv59_0 = "00000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> ShiftRows::ap_const_lv5_2 = "10";
const sc_lv<5> ShiftRows::ap_const_lv5_3 = "11";
const sc_lv<2> ShiftRows::ap_const_lv2_1 = "1";
const bool ShiftRows::ap_const_boolean_1 = true;

ShiftRows::ShiftRows(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln85_fu_96_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln85_fu_96_p2 );

    SC_METHOD(thread_icmp_ln85_fu_96_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( indvars_iv_reg_68 );

    SC_METHOD(thread_icmp_ln86_fu_164_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( indvars_iv_reg_68 );
    sensitive << ( zext_ln86_fu_160_p1 );

    SC_METHOD(thread_or_ln321_1_fu_130_p2);
    sensitive << ( tmp_fu_102_p3 );

    SC_METHOD(thread_or_ln321_2_fu_145_p2);
    sensitive << ( tmp_fu_102_p3 );

    SC_METHOD(thread_or_ln321_fu_115_p2);
    sensitive << ( tmp_fu_102_p3 );

    SC_METHOD(thread_r_fu_176_p2);
    sensitive << ( indvars_iv_reg_68 );

    SC_METHOD(thread_shift_fu_170_p2);
    sensitive << ( shift_0_reg_80 );

    SC_METHOD(thread_state_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_V_addr_reg_185 );
    sensitive << ( state_V_addr_2_reg_195 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_V_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_V_addr_1_reg_190 );
    sensitive << ( state_V_addr_3_reg_200 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_V_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_V_d0);
    sensitive << ( reg_91 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_V_d1);
    sensitive << ( state_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_V_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_V_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_1_fu_121_p3);
    sensitive << ( or_ln321_fu_115_p2 );

    SC_METHOD(thread_tmp_2_fu_136_p3);
    sensitive << ( or_ln321_1_fu_130_p2 );

    SC_METHOD(thread_tmp_3_fu_151_p3);
    sensitive << ( or_ln321_2_fu_145_p2 );

    SC_METHOD(thread_tmp_fu_102_p3);
    sensitive << ( indvars_iv_reg_68 );

    SC_METHOD(thread_zext_ln86_fu_160_p1);
    sensitive << ( shift_0_reg_80 );

    SC_METHOD(thread_zext_ln87_fu_110_p1);
    sensitive << ( tmp_fu_102_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln85_fu_96_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln86_fu_164_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ShiftRows_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_V_address0, "(port)state_V_address0");
    sc_trace(mVcdFile, state_V_ce0, "(port)state_V_ce0");
    sc_trace(mVcdFile, state_V_we0, "(port)state_V_we0");
    sc_trace(mVcdFile, state_V_d0, "(port)state_V_d0");
    sc_trace(mVcdFile, state_V_q0, "(port)state_V_q0");
    sc_trace(mVcdFile, state_V_address1, "(port)state_V_address1");
    sc_trace(mVcdFile, state_V_ce1, "(port)state_V_ce1");
    sc_trace(mVcdFile, state_V_we1, "(port)state_V_we1");
    sc_trace(mVcdFile, state_V_d1, "(port)state_V_d1");
    sc_trace(mVcdFile, state_V_q1, "(port)state_V_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_91, "reg_91");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, state_V_addr_reg_185, "state_V_addr_reg_185");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln85_fu_96_p2, "icmp_ln85_fu_96_p2");
    sc_trace(mVcdFile, state_V_addr_1_reg_190, "state_V_addr_1_reg_190");
    sc_trace(mVcdFile, state_V_addr_2_reg_195, "state_V_addr_2_reg_195");
    sc_trace(mVcdFile, state_V_addr_3_reg_200, "state_V_addr_3_reg_200");
    sc_trace(mVcdFile, shift_fu_170_p2, "shift_fu_170_p2");
    sc_trace(mVcdFile, shift_reg_208, "shift_reg_208");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, r_fu_176_p2, "r_fu_176_p2");
    sc_trace(mVcdFile, icmp_ln86_fu_164_p2, "icmp_ln86_fu_164_p2");
    sc_trace(mVcdFile, indvars_iv_reg_68, "indvars_iv_reg_68");
    sc_trace(mVcdFile, shift_0_reg_80, "shift_0_reg_80");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln87_fu_110_p1, "zext_ln87_fu_110_p1");
    sc_trace(mVcdFile, tmp_1_fu_121_p3, "tmp_1_fu_121_p3");
    sc_trace(mVcdFile, tmp_2_fu_136_p3, "tmp_2_fu_136_p3");
    sc_trace(mVcdFile, tmp_3_fu_151_p3, "tmp_3_fu_151_p3");
    sc_trace(mVcdFile, tmp_fu_102_p3, "tmp_fu_102_p3");
    sc_trace(mVcdFile, or_ln321_fu_115_p2, "or_ln321_fu_115_p2");
    sc_trace(mVcdFile, or_ln321_1_fu_130_p2, "or_ln321_1_fu_130_p2");
    sc_trace(mVcdFile, or_ln321_2_fu_145_p2, "or_ln321_2_fu_145_p2");
    sc_trace(mVcdFile, zext_ln86_fu_160_p1, "zext_ln86_fu_160_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

ShiftRows::~ShiftRows() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ShiftRows::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvars_iv_reg_68 = ap_const_lv3_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln86_fu_164_p2.read(), ap_const_lv1_1))) {
        indvars_iv_reg_68 = r_fu_176_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln85_fu_96_p2.read(), ap_const_lv1_0))) {
        shift_0_reg_80 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        shift_0_reg_80 = shift_reg_208.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        reg_91 = state_V_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_208 = shift_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln85_fu_96_p2.read(), ap_const_lv1_0))) {
        state_V_addr_1_reg_190 =  (sc_lv<4>) (tmp_1_fu_121_p3.read());
        state_V_addr_2_reg_195 =  (sc_lv<4>) (tmp_2_fu_136_p3.read());
        state_V_addr_3_reg_200 =  (sc_lv<4>) (tmp_3_fu_151_p3.read());
        state_V_addr_reg_185 =  (sc_lv<4>) (zext_ln87_fu_110_p1.read());
    }
}

void ShiftRows::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ShiftRows::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ShiftRows::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ShiftRows::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ShiftRows::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ShiftRows::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void ShiftRows::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln85_fu_96_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ShiftRows::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ShiftRows::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln85_fu_96_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ShiftRows::thread_icmp_ln85_fu_96_p2() {
    icmp_ln85_fu_96_p2 = (!indvars_iv_reg_68.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(indvars_iv_reg_68.read() == ap_const_lv3_4);
}

void ShiftRows::thread_icmp_ln86_fu_164_p2() {
    icmp_ln86_fu_164_p2 = (!zext_ln86_fu_160_p1.read().is_01() || !indvars_iv_reg_68.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln86_fu_160_p1.read() == indvars_iv_reg_68.read());
}

void ShiftRows::thread_or_ln321_1_fu_130_p2() {
    or_ln321_1_fu_130_p2 = (tmp_fu_102_p3.read() | ap_const_lv5_2);
}

void ShiftRows::thread_or_ln321_2_fu_145_p2() {
    or_ln321_2_fu_145_p2 = (tmp_fu_102_p3.read() | ap_const_lv5_3);
}

void ShiftRows::thread_or_ln321_fu_115_p2() {
    or_ln321_fu_115_p2 = (tmp_fu_102_p3.read() | ap_const_lv5_1);
}

void ShiftRows::thread_r_fu_176_p2() {
    r_fu_176_p2 = (!indvars_iv_reg_68.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(indvars_iv_reg_68.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void ShiftRows::thread_shift_fu_170_p2() {
    shift_fu_170_p2 = (!shift_0_reg_80.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(shift_0_reg_80.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void ShiftRows::thread_state_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_V_address0 = state_V_addr_2_reg_195.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        state_V_address0 = state_V_addr_reg_185.read();
    } else {
        state_V_address0 = "XXXX";
    }
}

void ShiftRows::thread_state_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_V_address1 = state_V_addr_3_reg_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        state_V_address1 = state_V_addr_1_reg_190.read();
    } else {
        state_V_address1 = "XXXX";
    }
}

void ShiftRows::thread_state_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_V_ce0 = ap_const_logic_1;
    } else {
        state_V_ce0 = ap_const_logic_0;
    }
}

void ShiftRows::thread_state_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        state_V_ce1 = ap_const_logic_1;
    } else {
        state_V_ce1 = ap_const_logic_0;
    }
}

void ShiftRows::thread_state_V_d0() {
    state_V_d0 = reg_91.read();
}

void ShiftRows::thread_state_V_d1() {
    state_V_d1 = state_V_q0.read();
}

void ShiftRows::thread_state_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        state_V_we0 = ap_const_logic_1;
    } else {
        state_V_we0 = ap_const_logic_0;
    }
}

void ShiftRows::thread_state_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_V_we1 = ap_const_logic_1;
    } else {
        state_V_we1 = ap_const_logic_0;
    }
}

void ShiftRows::thread_tmp_1_fu_121_p3() {
    tmp_1_fu_121_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln321_fu_115_p2.read());
}

void ShiftRows::thread_tmp_2_fu_136_p3() {
    tmp_2_fu_136_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln321_1_fu_130_p2.read());
}

void ShiftRows::thread_tmp_3_fu_151_p3() {
    tmp_3_fu_151_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln321_2_fu_145_p2.read());
}

void ShiftRows::thread_tmp_fu_102_p3() {
    tmp_fu_102_p3 = esl_concat<3,2>(indvars_iv_reg_68.read(), ap_const_lv2_0);
}

void ShiftRows::thread_zext_ln86_fu_160_p1() {
    zext_ln86_fu_160_p1 = esl_zext<3,2>(shift_0_reg_80.read());
}

void ShiftRows::thread_zext_ln87_fu_110_p1() {
    zext_ln87_fu_110_p1 = esl_zext<64,5>(tmp_fu_102_p3.read());
}

void ShiftRows::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln85_fu_96_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln86_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

