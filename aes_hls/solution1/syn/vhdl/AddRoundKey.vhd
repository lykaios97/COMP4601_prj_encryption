-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_V_ce0 : OUT STD_LOGIC;
    state_V_we0 : OUT STD_LOGIC;
    state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    roundKey_V_ce0 : OUT STD_LOGIC;
    roundKey_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    roundKey_V_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln1503_fu_81_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1503_reg_183 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_91_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_191 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1503_fu_97_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1503_reg_196 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln111_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal roundKey_V_addr_reg_201 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_117_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_V_addr_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln112_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln113_fu_145_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln113_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_59 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln1503_1_fu_106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_1_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1503_fu_101_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_123_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln719_fu_131_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln719_fu_135_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_149_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln113_fu_156_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln113_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1503_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1503_1_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_85_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_70 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_70 <= i_reg_209;
            end if; 
        end if;
    end process;

    j_0_reg_59_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_59 <= j_reg_191;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_59 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_209 <= i_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_191 <= j_fu_91_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_85_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                roundKey_V_addr_reg_201 <= zext_ln1503_1_fu_106_p1(6 - 1 downto 0);
                    zext_ln1503_reg_196(2 downto 0) <= zext_ln1503_fu_97_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_V_addr_reg_214 <= zext_ln719_1_fu_140_p1(4 - 1 downto 0);
                trunc_ln113_reg_219 <= trunc_ln113_fu_145_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln1503_reg_183 <= trunc_ln1503_fu_81_p1;
            end if;
        end if;
    end process;
    zext_ln1503_reg_196(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln111_fu_85_p2, ap_CS_fsm_state3, icmp_ln112_fu_111_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln111_fu_85_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln112_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1503_fu_101_p2 <= std_logic_vector(unsigned(trunc_ln1503_reg_183) + unsigned(zext_ln1503_fu_97_p1));
    add_ln719_fu_135_p2 <= std_logic_vector(unsigned(zext_ln719_fu_131_p1) + unsigned(zext_ln1503_reg_196));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln111_fu_85_p2)
    begin
        if ((((icmp_ln111_fu_85_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln111_fu_85_p2)
    begin
        if (((icmp_ln111_fu_85_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_117_p2 <= std_logic_vector(unsigned(i_0_reg_70) + unsigned(ap_const_lv3_1));
    icmp_ln111_fu_85_p2 <= "1" when (j_0_reg_59 = ap_const_lv3_4) else "0";
    icmp_ln112_fu_111_p2 <= "1" when (i_0_reg_70 = ap_const_lv3_4) else "0";
    j_fu_91_p2 <= std_logic_vector(unsigned(j_0_reg_59) + unsigned(ap_const_lv3_1));
    lshr_ln1503_fu_166_p2 <= std_logic_vector(shift_right(unsigned(roundKey_V_q0),to_integer(unsigned('0' & zext_ln113_fu_162_p1(31-1 downto 0)))));
    roundKey_V_address0 <= roundKey_V_addr_reg_201;

    roundKey_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            roundKey_V_ce0 <= ap_const_logic_1;
        else 
            roundKey_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_149_p3 <= (trunc_ln113_reg_219 & ap_const_lv3_0);

    state_V_address0_assign_proc : process(ap_CS_fsm_state3, state_V_addr_reg_214, ap_CS_fsm_state4, zext_ln719_1_fu_140_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_address0 <= state_V_addr_reg_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_address0 <= zext_ln719_1_fu_140_p1(4 - 1 downto 0);
        else 
            state_V_address0 <= "XXXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_V_ce0 <= ap_const_logic_1;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_d0 <= (trunc_ln1503_1_fu_172_p1 xor state_V_q0);

    state_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_we0 <= ap_const_logic_1;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln113_fu_156_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(shl_ln_fu_149_p3));
    tmp_fu_123_p3 <= (i_0_reg_70 & ap_const_lv2_0);
    trunc_ln113_fu_145_p1 <= i_0_reg_70(2 - 1 downto 0);
    trunc_ln1503_1_fu_172_p1 <= lshr_ln1503_fu_166_p2(8 - 1 downto 0);
    trunc_ln1503_fu_81_p1 <= roundKey_V_offset(6 - 1 downto 0);
    zext_ln113_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln113_fu_156_p2),32));
    zext_ln1503_1_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1503_fu_101_p2),64));
    zext_ln1503_fu_97_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_59),6));
    zext_ln719_1_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_fu_135_p2),64));
    zext_ln719_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_123_p3),6));
end behav;
