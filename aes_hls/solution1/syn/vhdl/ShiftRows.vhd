-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ShiftRows is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_V_ce0 : OUT STD_LOGIC;
    state_V_we0 : OUT STD_LOGIC;
    state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_V_ce1 : OUT STD_LOGIC;
    state_V_we1 : OUT STD_LOGIC;
    state_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of ShiftRows is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_91 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_V_addr_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln85_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_V_addr_1_reg_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_V_addr_2_reg_195 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_V_addr_3_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_fu_170_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_176_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln86_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_0_reg_80 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln87_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_121_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_136_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_151_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_102_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln321_fu_115_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln321_1_fu_130_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln321_2_fu_145_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln86_fu_160_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    indvars_iv_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_68 <= ap_const_lv3_1;
            elsif (((icmp_ln86_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_68 <= r_fu_176_p2;
            end if; 
        end if;
    end process;

    shift_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_96_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                shift_0_reg_80 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                shift_0_reg_80 <= shift_reg_208;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_91 <= state_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                shift_reg_208 <= shift_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_96_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    state_V_addr_1_reg_190(3 downto 2) <= tmp_1_fu_121_p3(4 - 1 downto 0)(3 downto 2);
                    state_V_addr_2_reg_195(3 downto 2) <= tmp_2_fu_136_p3(4 - 1 downto 0)(3 downto 2);
                    state_V_addr_3_reg_200(3 downto 2) <= tmp_3_fu_151_p3(4 - 1 downto 0)(3 downto 2);
                    state_V_addr_reg_185(3 downto 2) <= zext_ln87_fu_110_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    state_V_addr_reg_185(1 downto 0) <= "00";
    state_V_addr_1_reg_190(1 downto 0) <= "01";
    state_V_addr_2_reg_195(1 downto 0) <= "10";
    state_V_addr_3_reg_200(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln85_fu_96_p2, ap_CS_fsm_state3, icmp_ln86_fu_164_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln85_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln86_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln85_fu_96_p2)
    begin
        if ((((icmp_ln85_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln85_fu_96_p2)
    begin
        if (((icmp_ln85_fu_96_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln85_fu_96_p2 <= "1" when (indvars_iv_reg_68 = ap_const_lv3_4) else "0";
    icmp_ln86_fu_164_p2 <= "1" when (zext_ln86_fu_160_p1 = indvars_iv_reg_68) else "0";
    or_ln321_1_fu_130_p2 <= (tmp_fu_102_p3 or ap_const_lv5_2);
    or_ln321_2_fu_145_p2 <= (tmp_fu_102_p3 or ap_const_lv5_3);
    or_ln321_fu_115_p2 <= (tmp_fu_102_p3 or ap_const_lv5_1);
    r_fu_176_p2 <= std_logic_vector(unsigned(indvars_iv_reg_68) + unsigned(ap_const_lv3_1));
    shift_fu_170_p2 <= std_logic_vector(unsigned(shift_0_reg_80) + unsigned(ap_const_lv2_1));

    state_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, state_V_addr_reg_185, state_V_addr_2_reg_195, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_address0 <= state_V_addr_2_reg_195;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_V_address0 <= state_V_addr_reg_185;
        else 
            state_V_address0 <= "XXXX";
        end if; 
    end process;


    state_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, state_V_addr_1_reg_190, state_V_addr_3_reg_200, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_address1 <= state_V_addr_3_reg_200;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_V_address1 <= state_V_addr_1_reg_190;
        else 
            state_V_address1 <= "XXXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_ce0 <= ap_const_logic_1;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_ce1 <= ap_const_logic_1;
        else 
            state_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_d0 <= reg_91;
    state_V_d1 <= state_V_q0;

    state_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_V_we0 <= ap_const_logic_1;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_we1 <= ap_const_logic_1;
        else 
            state_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_121_p3 <= (ap_const_lv59_0 & or_ln321_fu_115_p2);
    tmp_2_fu_136_p3 <= (ap_const_lv59_0 & or_ln321_1_fu_130_p2);
    tmp_3_fu_151_p3 <= (ap_const_lv59_0 & or_ln321_2_fu_145_p2);
    tmp_fu_102_p3 <= (indvars_iv_reg_68 & ap_const_lv2_0);
    zext_ln86_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_0_reg_80),3));
    zext_ln87_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_102_p3),64));
end behav;
