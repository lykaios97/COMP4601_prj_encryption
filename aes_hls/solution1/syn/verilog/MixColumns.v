// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_V_address0,
        state_V_ce0,
        state_V_we0,
        state_V_d0,
        state_V_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_V_address0;
output   state_V_ce0;
output   state_V_we0;
output  [7:0] state_V_d0;
input  [7:0] state_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_V_address0;
reg state_V_ce0;
reg state_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] c_fu_164_p2;
reg   [2:0] c_reg_392;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln99_fu_170_p1;
reg   [5:0] zext_ln99_reg_397;
wire   [0:0] icmp_ln97_fu_158_p2;
wire   [2:0] r_fu_180_p2;
reg   [2:0] r_reg_406;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln99_fu_174_p2;
wire   [1:0] trunc_ln321_fu_208_p1;
reg   [1:0] trunc_ln321_reg_416;
wire   [7:0] ret_V_fu_262_p2;
reg   [7:0] ret_V_reg_452;
wire    ap_CS_fsm_state5;
wire    grp_gmul_fu_102_ap_ready;
wire    grp_gmul_fu_102_ap_done;
wire    grp_gmul_fu_109_ap_ready;
wire    grp_gmul_fu_109_ap_done;
wire    grp_gmul_fu_116_ap_ready;
wire    grp_gmul_fu_116_ap_done;
wire    grp_gmul_fu_123_ap_ready;
wire    grp_gmul_fu_123_ap_done;
wire    grp_gmul_fu_130_ap_ready;
wire    grp_gmul_fu_130_ap_done;
wire    grp_gmul_fu_137_ap_ready;
wire    grp_gmul_fu_137_ap_done;
wire    grp_gmul_fu_144_ap_ready;
wire    grp_gmul_fu_144_ap_done;
wire    grp_gmul_fu_151_ap_ready;
wire    grp_gmul_fu_151_ap_done;
reg    ap_block_state5_on_subcall_done;
wire   [7:0] ret_V_1_fu_278_p2;
reg   [7:0] ret_V_1_reg_457;
wire   [7:0] ret_V_2_fu_294_p2;
reg   [7:0] ret_V_2_reg_462;
wire   [7:0] ret_V_3_fu_310_p2;
reg   [7:0] ret_V_3_reg_467;
wire   [2:0] r_1_fu_322_p2;
wire    ap_CS_fsm_state6;
wire    grp_gmul_fu_102_ap_start;
wire    grp_gmul_fu_102_ap_idle;
wire   [7:0] grp_gmul_fu_102_ap_return;
wire    grp_gmul_fu_109_ap_start;
wire    grp_gmul_fu_109_ap_idle;
wire   [7:0] grp_gmul_fu_109_ap_return;
wire    grp_gmul_fu_116_ap_start;
wire    grp_gmul_fu_116_ap_idle;
wire   [7:0] grp_gmul_fu_116_ap_return;
wire    grp_gmul_fu_123_ap_start;
wire    grp_gmul_fu_123_ap_idle;
wire   [7:0] grp_gmul_fu_123_ap_return;
wire    grp_gmul_fu_130_ap_start;
wire    grp_gmul_fu_130_ap_idle;
wire   [7:0] grp_gmul_fu_130_ap_return;
wire    grp_gmul_fu_137_ap_start;
wire    grp_gmul_fu_137_ap_idle;
wire   [7:0] grp_gmul_fu_137_ap_return;
wire    grp_gmul_fu_144_ap_start;
wire    grp_gmul_fu_144_ap_idle;
wire   [7:0] grp_gmul_fu_144_ap_return;
wire    grp_gmul_fu_151_ap_start;
wire    grp_gmul_fu_151_ap_idle;
wire   [7:0] grp_gmul_fu_151_ap_return;
reg   [2:0] c_0_reg_69;
wire   [0:0] icmp_ln106_fu_316_p2;
reg   [2:0] r_0_reg_80;
wire    ap_CS_fsm_state4;
reg   [2:0] r2_0_reg_91;
reg    grp_gmul_fu_102_ap_start_reg;
reg    grp_gmul_fu_109_ap_start_reg;
reg    grp_gmul_fu_116_ap_start_reg;
reg    grp_gmul_fu_123_ap_start_reg;
reg    grp_gmul_fu_130_ap_start_reg;
reg    grp_gmul_fu_137_ap_start_reg;
reg    grp_gmul_fu_144_ap_start_reg;
reg    grp_gmul_fu_151_ap_start_reg;
wire   [63:0] zext_ln321_1_fu_203_p1;
wire   [63:0] zext_ln321_3_fu_345_p1;
reg   [7:0] lhs_V_1_fu_32;
reg   [7:0] rhs_V_1_fu_36;
reg   [7:0] rhs_V_2_fu_40;
reg   [7:0] rhs_V_5_fu_44;
wire   [7:0] tmp_fu_354_p6;
wire   [4:0] tmp_4_fu_186_p3;
wire   [5:0] zext_ln321_fu_194_p1;
wire   [5:0] add_ln321_fu_198_p2;
wire   [7:0] xor_ln1357_1_fu_258_p2;
wire   [7:0] xor_ln1357_fu_252_p2;
wire   [7:0] xor_ln1357_4_fu_272_p2;
wire   [7:0] xor_ln1357_3_fu_268_p2;
wire   [7:0] xor_ln1357_7_fu_288_p2;
wire   [7:0] xor_ln1357_6_fu_284_p2;
wire   [7:0] xor_ln1357_10_fu_304_p2;
wire   [7:0] xor_ln1357_9_fu_300_p2;
wire   [4:0] tmp_5_fu_328_p3;
wire   [5:0] zext_ln321_2_fu_336_p1;
wire   [5:0] add_ln321_1_fu_340_p2;
wire   [1:0] tmp_fu_354_p5;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_gmul_fu_102_ap_start_reg = 1'b0;
#0 grp_gmul_fu_109_ap_start_reg = 1'b0;
#0 grp_gmul_fu_116_ap_start_reg = 1'b0;
#0 grp_gmul_fu_123_ap_start_reg = 1'b0;
#0 grp_gmul_fu_130_ap_start_reg = 1'b0;
#0 grp_gmul_fu_137_ap_start_reg = 1'b0;
#0 grp_gmul_fu_144_ap_start_reg = 1'b0;
#0 grp_gmul_fu_151_ap_start_reg = 1'b0;
end

gmul grp_gmul_fu_102(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_102_ap_start),
    .ap_done(grp_gmul_fu_102_ap_done),
    .ap_idle(grp_gmul_fu_102_ap_idle),
    .ap_ready(grp_gmul_fu_102_ap_ready),
    .a_V(3'd2),
    .b_V(lhs_V_1_fu_32),
    .ap_return(grp_gmul_fu_102_ap_return)
);

gmul grp_gmul_fu_109(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_109_ap_start),
    .ap_done(grp_gmul_fu_109_ap_done),
    .ap_idle(grp_gmul_fu_109_ap_idle),
    .ap_ready(grp_gmul_fu_109_ap_ready),
    .a_V(3'd3),
    .b_V(rhs_V_1_fu_36),
    .ap_return(grp_gmul_fu_109_ap_return)
);

gmul grp_gmul_fu_116(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_116_ap_start),
    .ap_done(grp_gmul_fu_116_ap_done),
    .ap_idle(grp_gmul_fu_116_ap_idle),
    .ap_ready(grp_gmul_fu_116_ap_ready),
    .a_V(3'd2),
    .b_V(rhs_V_1_fu_36),
    .ap_return(grp_gmul_fu_116_ap_return)
);

gmul grp_gmul_fu_123(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_123_ap_start),
    .ap_done(grp_gmul_fu_123_ap_done),
    .ap_idle(grp_gmul_fu_123_ap_idle),
    .ap_ready(grp_gmul_fu_123_ap_ready),
    .a_V(3'd3),
    .b_V(rhs_V_2_fu_40),
    .ap_return(grp_gmul_fu_123_ap_return)
);

gmul grp_gmul_fu_130(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_130_ap_start),
    .ap_done(grp_gmul_fu_130_ap_done),
    .ap_idle(grp_gmul_fu_130_ap_idle),
    .ap_ready(grp_gmul_fu_130_ap_ready),
    .a_V(3'd2),
    .b_V(rhs_V_2_fu_40),
    .ap_return(grp_gmul_fu_130_ap_return)
);

gmul grp_gmul_fu_137(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_137_ap_start),
    .ap_done(grp_gmul_fu_137_ap_done),
    .ap_idle(grp_gmul_fu_137_ap_idle),
    .ap_ready(grp_gmul_fu_137_ap_ready),
    .a_V(3'd3),
    .b_V(rhs_V_5_fu_44),
    .ap_return(grp_gmul_fu_137_ap_return)
);

gmul grp_gmul_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_144_ap_start),
    .ap_done(grp_gmul_fu_144_ap_done),
    .ap_idle(grp_gmul_fu_144_ap_idle),
    .ap_ready(grp_gmul_fu_144_ap_ready),
    .a_V(3'd3),
    .b_V(lhs_V_1_fu_32),
    .ap_return(grp_gmul_fu_144_ap_return)
);

gmul grp_gmul_fu_151(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gmul_fu_151_ap_start),
    .ap_done(grp_gmul_fu_151_ap_done),
    .ap_idle(grp_gmul_fu_151_ap_idle),
    .ap_ready(grp_gmul_fu_151_ap_ready),
    .a_V(3'd2),
    .b_V(rhs_V_5_fu_44),
    .ap_return(grp_gmul_fu_151_ap_return)
);

aes_top_mux_42_8_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aes_top_mux_42_8_bkb_U9(
    .din0(ret_V_reg_452),
    .din1(ret_V_1_reg_457),
    .din2(ret_V_2_reg_462),
    .din3(ret_V_3_reg_467),
    .din4(tmp_fu_354_p5),
    .dout(tmp_fu_354_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_102_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_102_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_102_ap_ready == 1'b1)) begin
            grp_gmul_fu_102_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_109_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_109_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_109_ap_ready == 1'b1)) begin
            grp_gmul_fu_109_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_116_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_116_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_116_ap_ready == 1'b1)) begin
            grp_gmul_fu_116_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_123_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_123_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_123_ap_ready == 1'b1)) begin
            grp_gmul_fu_123_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_130_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_130_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_130_ap_ready == 1'b1)) begin
            grp_gmul_fu_130_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_137_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_137_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_137_ap_ready == 1'b1)) begin
            grp_gmul_fu_137_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_144_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_144_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_144_ap_ready == 1'b1)) begin
            grp_gmul_fu_144_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gmul_fu_151_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gmul_fu_151_ap_start_reg <= 1'b1;
        end else if ((grp_gmul_fu_151_ap_ready == 1'b1)) begin
            grp_gmul_fu_151_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        c_0_reg_69 <= c_reg_392;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_69 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        r2_0_reg_91 <= r_1_fu_322_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        r2_0_reg_91 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_reg_80 <= r_reg_406;
    end else if (((icmp_ln97_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_80 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_392 <= c_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln321_reg_416 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        lhs_V_1_fu_32 <= state_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_406 <= r_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        ret_V_1_reg_457 <= ret_V_1_fu_278_p2;
        ret_V_2_reg_462 <= ret_V_2_fu_294_p2;
        ret_V_3_reg_467 <= ret_V_3_fu_310_p2;
        ret_V_reg_452 <= ret_V_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln321_reg_416 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        rhs_V_1_fu_36 <= state_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln321_reg_416 == 2'd2) & (1'b1 == ap_CS_fsm_state4))) begin
        rhs_V_2_fu_40 <= state_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln321_reg_416 == 2'd3) & (1'b1 == ap_CS_fsm_state4))) begin
        rhs_V_5_fu_44 <= state_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln321_reg_416 <= trunc_ln321_fu_208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln99_reg_397[2 : 0] <= zext_ln99_fu_170_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln97_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_V_address0 = zext_ln321_3_fu_345_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_V_address0 = zext_ln321_1_fu_203_p1;
    end else begin
        state_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        state_V_ce0 = 1'b1;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_V_we0 = 1'b1;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln97_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln99_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln106_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_1_fu_340_p2 = (zext_ln321_2_fu_336_p1 + zext_ln99_reg_397);

assign add_ln321_fu_198_p2 = (zext_ln321_fu_194_p1 + zext_ln99_reg_397);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_gmul_fu_137_ap_done == 1'b0) | (grp_gmul_fu_130_ap_done == 1'b0) | (grp_gmul_fu_123_ap_done == 1'b0) | (grp_gmul_fu_116_ap_done == 1'b0) | (grp_gmul_fu_109_ap_done == 1'b0) | (grp_gmul_fu_102_ap_done == 1'b0) | (grp_gmul_fu_151_ap_done == 1'b0) | (grp_gmul_fu_144_ap_done == 1'b0));
end

assign c_fu_164_p2 = (c_0_reg_69 + 3'd1);

assign grp_gmul_fu_102_ap_start = grp_gmul_fu_102_ap_start_reg;

assign grp_gmul_fu_109_ap_start = grp_gmul_fu_109_ap_start_reg;

assign grp_gmul_fu_116_ap_start = grp_gmul_fu_116_ap_start_reg;

assign grp_gmul_fu_123_ap_start = grp_gmul_fu_123_ap_start_reg;

assign grp_gmul_fu_130_ap_start = grp_gmul_fu_130_ap_start_reg;

assign grp_gmul_fu_137_ap_start = grp_gmul_fu_137_ap_start_reg;

assign grp_gmul_fu_144_ap_start = grp_gmul_fu_144_ap_start_reg;

assign grp_gmul_fu_151_ap_start = grp_gmul_fu_151_ap_start_reg;

assign icmp_ln106_fu_316_p2 = ((r2_0_reg_91 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_158_p2 = ((c_0_reg_69 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_174_p2 = ((r_0_reg_80 == 3'd4) ? 1'b1 : 1'b0);

assign r_1_fu_322_p2 = (r2_0_reg_91 + 3'd1);

assign r_fu_180_p2 = (r_0_reg_80 + 3'd1);

assign ret_V_1_fu_278_p2 = (xor_ln1357_4_fu_272_p2 ^ xor_ln1357_3_fu_268_p2);

assign ret_V_2_fu_294_p2 = (xor_ln1357_7_fu_288_p2 ^ xor_ln1357_6_fu_284_p2);

assign ret_V_3_fu_310_p2 = (xor_ln1357_9_fu_300_p2 ^ xor_ln1357_10_fu_304_p2);

assign ret_V_fu_262_p2 = (xor_ln1357_fu_252_p2 ^ xor_ln1357_1_fu_258_p2);

assign state_V_d0 = tmp_fu_354_p6;

assign tmp_4_fu_186_p3 = {{r_0_reg_80}, {2'd0}};

assign tmp_5_fu_328_p3 = {{r2_0_reg_91}, {2'd0}};

assign tmp_fu_354_p5 = r2_0_reg_91[1:0];

assign trunc_ln321_fu_208_p1 = r_0_reg_80[1:0];

assign xor_ln1357_10_fu_304_p2 = (grp_gmul_fu_151_ap_return ^ grp_gmul_fu_144_ap_return);

assign xor_ln1357_1_fu_258_p2 = (rhs_V_5_fu_44 ^ rhs_V_2_fu_40);

assign xor_ln1357_3_fu_268_p2 = (rhs_V_5_fu_44 ^ lhs_V_1_fu_32);

assign xor_ln1357_4_fu_272_p2 = (grp_gmul_fu_123_ap_return ^ grp_gmul_fu_116_ap_return);

assign xor_ln1357_6_fu_284_p2 = (rhs_V_1_fu_36 ^ lhs_V_1_fu_32);

assign xor_ln1357_7_fu_288_p2 = (grp_gmul_fu_137_ap_return ^ grp_gmul_fu_130_ap_return);

assign xor_ln1357_9_fu_300_p2 = (rhs_V_2_fu_40 ^ rhs_V_1_fu_36);

assign xor_ln1357_fu_252_p2 = (grp_gmul_fu_109_ap_return ^ grp_gmul_fu_102_ap_return);

assign zext_ln321_1_fu_203_p1 = add_ln321_fu_198_p2;

assign zext_ln321_2_fu_336_p1 = tmp_5_fu_328_p3;

assign zext_ln321_3_fu_345_p1 = add_ln321_1_fu_340_p2;

assign zext_ln321_fu_194_p1 = tmp_4_fu_186_p3;

assign zext_ln99_fu_170_p1 = c_0_reg_69;

always @ (posedge ap_clk) begin
    zext_ln99_reg_397[5:3] <= 3'b000;
end

endmodule //MixColumns
