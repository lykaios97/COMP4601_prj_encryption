// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ShiftRows (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_V_address0,
        state_V_ce0,
        state_V_we0,
        state_V_d0,
        state_V_q0,
        state_V_address1,
        state_V_ce1,
        state_V_we1,
        state_V_d1,
        state_V_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_V_address0;
output   state_V_ce0;
output   state_V_we0;
output  [7:0] state_V_d0;
input  [7:0] state_V_q0;
output  [3:0] state_V_address1;
output   state_V_ce1;
output   state_V_we1;
output  [7:0] state_V_d1;
input  [7:0] state_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_V_address0;
reg state_V_ce0;
reg state_V_we0;
reg[3:0] state_V_address1;
reg state_V_ce1;
reg state_V_we1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_91;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [3:0] state_V_addr_reg_185;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln85_fu_96_p2;
reg   [3:0] state_V_addr_1_reg_190;
reg   [3:0] state_V_addr_2_reg_195;
reg   [3:0] state_V_addr_3_reg_200;
wire   [1:0] shift_fu_170_p2;
reg   [1:0] shift_reg_208;
wire    ap_CS_fsm_state3;
wire   [2:0] r_fu_176_p2;
wire   [0:0] icmp_ln86_fu_164_p2;
reg   [2:0] indvars_iv_reg_68;
reg   [1:0] shift_0_reg_80;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln87_fu_110_p1;
wire   [63:0] tmp_1_fu_121_p3;
wire   [63:0] tmp_2_fu_136_p3;
wire   [63:0] tmp_3_fu_151_p3;
wire   [4:0] tmp_fu_102_p3;
wire   [4:0] or_ln321_fu_115_p2;
wire   [4:0] or_ln321_1_fu_130_p2;
wire   [4:0] or_ln321_2_fu_145_p2;
wire   [2:0] zext_ln86_fu_160_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_68 <= 3'd1;
    end else if (((icmp_ln86_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv_reg_68 <= r_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_0_reg_80 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_0_reg_80 <= shift_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_91 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_208 <= shift_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        state_V_addr_1_reg_190[3 : 2] <= tmp_1_fu_121_p3[3 : 2];
        state_V_addr_2_reg_195[3 : 2] <= tmp_2_fu_136_p3[3 : 2];
        state_V_addr_3_reg_200[3 : 2] <= tmp_3_fu_151_p3[3 : 2];
        state_V_addr_reg_185[3 : 2] <= zext_ln87_fu_110_p1[3 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln85_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_address0 = state_V_addr_2_reg_195;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        state_V_address0 = state_V_addr_reg_185;
    end else begin
        state_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_V_address1 = state_V_addr_3_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        state_V_address1 = state_V_addr_1_reg_190;
    end else begin
        state_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_ce0 = 1'b1;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_ce1 = 1'b1;
    end else begin
        state_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        state_V_we0 = 1'b1;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_we1 = 1'b1;
    end else begin
        state_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln85_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln86_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign icmp_ln85_fu_96_p2 = ((indvars_iv_reg_68 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_164_p2 = ((zext_ln86_fu_160_p1 == indvars_iv_reg_68) ? 1'b1 : 1'b0);

assign or_ln321_1_fu_130_p2 = (tmp_fu_102_p3 | 5'd2);

assign or_ln321_2_fu_145_p2 = (tmp_fu_102_p3 | 5'd3);

assign or_ln321_fu_115_p2 = (tmp_fu_102_p3 | 5'd1);

assign r_fu_176_p2 = (indvars_iv_reg_68 + 3'd1);

assign shift_fu_170_p2 = (shift_0_reg_80 + 2'd1);

assign state_V_d0 = reg_91;

assign state_V_d1 = state_V_q0;

assign tmp_1_fu_121_p3 = {{59'd0}, {or_ln321_fu_115_p2}};

assign tmp_2_fu_136_p3 = {{59'd0}, {or_ln321_1_fu_130_p2}};

assign tmp_3_fu_151_p3 = {{59'd0}, {or_ln321_2_fu_145_p2}};

assign tmp_fu_102_p3 = {{indvars_iv_reg_68}, {2'd0}};

assign zext_ln86_fu_160_p1 = shift_0_reg_80;

assign zext_ln87_fu_110_p1 = tmp_fu_102_p3;

always @ (posedge ap_clk) begin
    state_V_addr_reg_185[1:0] <= 2'b00;
    state_V_addr_1_reg_190[1:0] <= 2'b01;
    state_V_addr_2_reg_195[1:0] <= 2'b10;
    state_V_addr_3_reg_200[1:0] <= 2'b11;
end

endmodule //ShiftRows
