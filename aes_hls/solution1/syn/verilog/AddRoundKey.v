// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_V_address0,
        state_V_ce0,
        state_V_we0,
        state_V_d0,
        state_V_q0,
        roundKey_V_address0,
        roundKey_V_ce0,
        roundKey_V_q0,
        roundKey_V_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_V_address0;
output   state_V_ce0;
output   state_V_we0;
output  [7:0] state_V_d0;
input  [7:0] state_V_q0;
output  [5:0] roundKey_V_address0;
output   roundKey_V_ce0;
input  [31:0] roundKey_V_q0;
input  [7:0] roundKey_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_V_address0;
reg state_V_ce0;
reg state_V_we0;
reg roundKey_V_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] trunc_ln1503_fu_81_p1;
reg   [5:0] trunc_ln1503_reg_183;
wire   [2:0] j_fu_91_p2;
reg   [2:0] j_reg_191;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln1503_fu_97_p1;
reg   [5:0] zext_ln1503_reg_196;
wire   [0:0] icmp_ln111_fu_85_p2;
reg   [5:0] roundKey_V_addr_reg_201;
wire   [2:0] i_fu_117_p2;
reg   [2:0] i_reg_209;
wire    ap_CS_fsm_state3;
reg   [3:0] state_V_addr_reg_214;
wire   [0:0] icmp_ln112_fu_111_p2;
wire   [1:0] trunc_ln113_fu_145_p1;
reg   [1:0] trunc_ln113_reg_219;
reg   [2:0] j_0_reg_59;
reg   [2:0] i_0_reg_70;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln1503_1_fu_106_p1;
wire   [63:0] zext_ln719_1_fu_140_p1;
wire   [5:0] add_ln1503_fu_101_p2;
wire   [4:0] tmp_fu_123_p3;
wire   [5:0] zext_ln719_fu_131_p1;
wire   [5:0] add_ln719_fu_135_p2;
wire   [4:0] shl_ln_fu_149_p3;
wire   [4:0] sub_ln113_fu_156_p2;
wire   [31:0] zext_ln113_fu_162_p1;
wire   [31:0] lshr_ln1503_fu_166_p2;
wire   [7:0] trunc_ln1503_1_fu_172_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_70 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_70 <= i_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_59 <= j_reg_191;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_59 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_209 <= i_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_191 <= j_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        roundKey_V_addr_reg_201 <= zext_ln1503_1_fu_106_p1;
        zext_ln1503_reg_196[2 : 0] <= zext_ln1503_fu_97_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_V_addr_reg_214 <= zext_ln719_1_fu_140_p1;
        trunc_ln113_reg_219 <= trunc_ln113_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln1503_reg_183 <= trunc_ln1503_fu_81_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln111_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        roundKey_V_ce0 = 1'b1;
    end else begin
        roundKey_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_V_address0 = state_V_addr_reg_214;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_V_address0 = zext_ln719_1_fu_140_p1;
    end else begin
        state_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_V_ce0 = 1'b1;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_V_we0 = 1'b1;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln111_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln112_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1503_fu_101_p2 = (trunc_ln1503_reg_183 + zext_ln1503_fu_97_p1);

assign add_ln719_fu_135_p2 = (zext_ln719_fu_131_p1 + zext_ln1503_reg_196);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_117_p2 = (i_0_reg_70 + 3'd1);

assign icmp_ln111_fu_85_p2 = ((j_0_reg_59 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_111_p2 = ((i_0_reg_70 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_91_p2 = (j_0_reg_59 + 3'd1);

assign lshr_ln1503_fu_166_p2 = roundKey_V_q0 >> zext_ln113_fu_162_p1;

assign roundKey_V_address0 = roundKey_V_addr_reg_201;

assign shl_ln_fu_149_p3 = {{trunc_ln113_reg_219}, {3'd0}};

assign state_V_d0 = (trunc_ln1503_1_fu_172_p1 ^ state_V_q0);

assign sub_ln113_fu_156_p2 = ($signed(5'd24) - $signed(shl_ln_fu_149_p3));

assign tmp_fu_123_p3 = {{i_0_reg_70}, {2'd0}};

assign trunc_ln113_fu_145_p1 = i_0_reg_70[1:0];

assign trunc_ln1503_1_fu_172_p1 = lshr_ln1503_fu_166_p2[7:0];

assign trunc_ln1503_fu_81_p1 = roundKey_V_offset[5:0];

assign zext_ln113_fu_162_p1 = sub_ln113_fu_156_p2;

assign zext_ln1503_1_fu_106_p1 = add_ln1503_fu_101_p2;

assign zext_ln1503_fu_97_p1 = j_0_reg_59;

assign zext_ln719_1_fu_140_p1 = add_ln719_fu_135_p2;

assign zext_ln719_fu_131_p1 = tmp_fu_123_p3;

always @ (posedge ap_clk) begin
    zext_ln1503_reg_196[5:3] <= 3'b000;
end

endmodule //AddRoundKey
