// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_address0,
        in_V_ce0,
        in_V_q0,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        w_V_address0,
        w_V_ce0,
        w_V_q0
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_V_address0;
output   in_V_ce0;
input  [7:0] in_V_q0;
output  [3:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [7:0] out_V_d0;
output  [5:0] w_V_address0;
output   w_V_ce0;
input  [31:0] w_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_ce0;
reg out_V_ce0;
reg out_V_we0;
reg w_V_ce0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_171_p2;
reg   [4:0] i_reg_279;
wire    ap_CS_fsm_state2;
reg   [1:0] trunc_ln150_1_reg_284;
wire   [0:0] icmp_ln149_fu_165_p2;
wire   [1:0] trunc_ln321_fu_187_p1;
reg   [1:0] trunc_ln321_reg_289;
wire   [7:0] zext_ln158_fu_221_p1;
reg   [7:0] zext_ln158_reg_302;
wire    ap_CS_fsm_state11;
wire   [3:0] round_fu_226_p2;
reg   [3:0] round_reg_307;
wire   [4:0] i_1_fu_238_p2;
reg   [4:0] i_1_reg_315;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln165_fu_232_p2;
reg   [3:0] state_V_address0;
reg    state_V_ce0;
reg    state_V_we0;
reg   [7:0] state_V_d0;
wire   [7:0] state_V_q0;
reg    state_V_ce1;
reg    state_V_we1;
wire   [7:0] state_V_q1;
wire    grp_MixColumns_fu_138_ap_start;
wire    grp_MixColumns_fu_138_ap_done;
wire    grp_MixColumns_fu_138_ap_idle;
wire    grp_MixColumns_fu_138_ap_ready;
wire   [3:0] grp_MixColumns_fu_138_state_V_address0;
wire    grp_MixColumns_fu_138_state_V_ce0;
wire    grp_MixColumns_fu_138_state_V_we0;
wire   [7:0] grp_MixColumns_fu_138_state_V_d0;
wire    grp_AddRoundKey_fu_143_ap_start;
wire    grp_AddRoundKey_fu_143_ap_done;
wire    grp_AddRoundKey_fu_143_ap_idle;
wire    grp_AddRoundKey_fu_143_ap_ready;
wire   [3:0] grp_AddRoundKey_fu_143_state_V_address0;
wire    grp_AddRoundKey_fu_143_state_V_ce0;
wire    grp_AddRoundKey_fu_143_state_V_we0;
wire   [7:0] grp_AddRoundKey_fu_143_state_V_d0;
wire   [5:0] grp_AddRoundKey_fu_143_roundKey_V_address0;
wire    grp_AddRoundKey_fu_143_roundKey_V_ce0;
reg   [7:0] grp_AddRoundKey_fu_143_roundKey_V_offset;
wire    grp_ShiftRows_fu_153_ap_start;
wire    grp_ShiftRows_fu_153_ap_done;
wire    grp_ShiftRows_fu_153_ap_idle;
wire    grp_ShiftRows_fu_153_ap_ready;
wire   [3:0] grp_ShiftRows_fu_153_state_V_address0;
wire    grp_ShiftRows_fu_153_state_V_ce0;
wire    grp_ShiftRows_fu_153_state_V_we0;
wire   [7:0] grp_ShiftRows_fu_153_state_V_d0;
wire   [3:0] grp_ShiftRows_fu_153_state_V_address1;
wire    grp_ShiftRows_fu_153_state_V_ce1;
wire    grp_ShiftRows_fu_153_state_V_we1;
wire   [7:0] grp_ShiftRows_fu_153_state_V_d1;
wire    grp_SubBytes_fu_158_ap_start;
wire    grp_SubBytes_fu_158_ap_done;
wire    grp_SubBytes_fu_158_ap_idle;
wire    grp_SubBytes_fu_158_ap_ready;
wire   [3:0] grp_SubBytes_fu_158_state_V_address0;
wire    grp_SubBytes_fu_158_state_V_ce0;
wire    grp_SubBytes_fu_158_state_V_we0;
wire   [7:0] grp_SubBytes_fu_158_state_V_d0;
reg   [4:0] i_0_reg_103;
wire    ap_CS_fsm_state3;
reg   [3:0] round_0_reg_114;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state12;
reg   [4:0] i4_0_reg_126;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
reg    grp_MixColumns_fu_138_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_AddRoundKey_fu_143_ap_start_reg;
wire    ap_CS_fsm_state16;
reg    grp_ShiftRows_fu_153_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
reg    grp_SubBytes_fu_158_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln154_fu_207_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln150_fu_191_p1;
wire   [63:0] zext_ln321_fu_202_p1;
wire   [63:0] zext_ln321_2_fu_266_p1;
wire   [63:0] zext_ln166_fu_271_p1;
wire   [3:0] tmp_6_fu_196_p3;
wire   [5:0] shl_ln_fu_213_p3;
wire   [1:0] trunc_ln321_2_fu_254_p1;
wire   [1:0] trunc_ln166_1_fu_244_p4;
wire   [3:0] tmp_8_fu_258_p3;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 grp_MixColumns_fu_138_ap_start_reg = 1'b0;
#0 grp_AddRoundKey_fu_143_ap_start_reg = 1'b0;
#0 grp_ShiftRows_fu_153_ap_start_reg = 1'b0;
#0 grp_SubBytes_fu_158_ap_start_reg = 1'b0;
end

Cipher_state_V #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_V_address0),
    .ce0(state_V_ce0),
    .we0(state_V_we0),
    .d0(state_V_d0),
    .q0(state_V_q0),
    .address1(grp_ShiftRows_fu_153_state_V_address1),
    .ce1(state_V_ce1),
    .we1(state_V_we1),
    .d1(grp_ShiftRows_fu_153_state_V_d1),
    .q1(state_V_q1)
);

MixColumns grp_MixColumns_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MixColumns_fu_138_ap_start),
    .ap_done(grp_MixColumns_fu_138_ap_done),
    .ap_idle(grp_MixColumns_fu_138_ap_idle),
    .ap_ready(grp_MixColumns_fu_138_ap_ready),
    .state_V_address0(grp_MixColumns_fu_138_state_V_address0),
    .state_V_ce0(grp_MixColumns_fu_138_state_V_ce0),
    .state_V_we0(grp_MixColumns_fu_138_state_V_we0),
    .state_V_d0(grp_MixColumns_fu_138_state_V_d0),
    .state_V_q0(state_V_q0)
);

AddRoundKey grp_AddRoundKey_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_143_ap_start),
    .ap_done(grp_AddRoundKey_fu_143_ap_done),
    .ap_idle(grp_AddRoundKey_fu_143_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_143_ap_ready),
    .state_V_address0(grp_AddRoundKey_fu_143_state_V_address0),
    .state_V_ce0(grp_AddRoundKey_fu_143_state_V_ce0),
    .state_V_we0(grp_AddRoundKey_fu_143_state_V_we0),
    .state_V_d0(grp_AddRoundKey_fu_143_state_V_d0),
    .state_V_q0(state_V_q0),
    .roundKey_V_address0(grp_AddRoundKey_fu_143_roundKey_V_address0),
    .roundKey_V_ce0(grp_AddRoundKey_fu_143_roundKey_V_ce0),
    .roundKey_V_q0(w_V_q0),
    .roundKey_V_offset(grp_AddRoundKey_fu_143_roundKey_V_offset)
);

ShiftRows grp_ShiftRows_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ShiftRows_fu_153_ap_start),
    .ap_done(grp_ShiftRows_fu_153_ap_done),
    .ap_idle(grp_ShiftRows_fu_153_ap_idle),
    .ap_ready(grp_ShiftRows_fu_153_ap_ready),
    .state_V_address0(grp_ShiftRows_fu_153_state_V_address0),
    .state_V_ce0(grp_ShiftRows_fu_153_state_V_ce0),
    .state_V_we0(grp_ShiftRows_fu_153_state_V_we0),
    .state_V_d0(grp_ShiftRows_fu_153_state_V_d0),
    .state_V_q0(state_V_q0),
    .state_V_address1(grp_ShiftRows_fu_153_state_V_address1),
    .state_V_ce1(grp_ShiftRows_fu_153_state_V_ce1),
    .state_V_we1(grp_ShiftRows_fu_153_state_V_we1),
    .state_V_d1(grp_ShiftRows_fu_153_state_V_d1),
    .state_V_q1(state_V_q1)
);

SubBytes grp_SubBytes_fu_158(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_158_ap_start),
    .ap_done(grp_SubBytes_fu_158_ap_done),
    .ap_idle(grp_SubBytes_fu_158_ap_idle),
    .ap_ready(grp_SubBytes_fu_158_ap_ready),
    .state_V_address0(grp_SubBytes_fu_158_state_V_address0),
    .state_V_ce0(grp_SubBytes_fu_158_state_V_ce0),
    .state_V_we0(grp_SubBytes_fu_158_state_V_we0),
    .state_V_d0(grp_SubBytes_fu_158_state_V_d0),
    .state_V_q0(state_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | ((icmp_ln149_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_AddRoundKey_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_143_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MixColumns_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_MixColumns_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_MixColumns_fu_138_ap_ready == 1'b1)) begin
            grp_MixColumns_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ShiftRows_fu_153_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7))) begin
            grp_ShiftRows_fu_153_ap_start_reg <= 1'b1;
        end else if ((grp_ShiftRows_fu_153_ap_ready == 1'b1)) begin
            grp_ShiftRows_fu_153_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SubBytes_fu_158_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln154_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln154_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_SubBytes_fu_158_ap_start_reg <= 1'b1;
        end else if ((grp_SubBytes_fu_158_ap_ready == 1'b1)) begin
            grp_SubBytes_fu_158_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i4_0_reg_126 <= i_1_reg_315;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_AddRoundKey_fu_143_ap_done == 1'b1))) begin
        i4_0_reg_126 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_103 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_103 <= i_reg_279;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_143_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            round_0_reg_114 <= round_reg_307;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            round_0_reg_114 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_1_reg_315 <= i_1_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_279 <= i_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        round_reg_307 <= round_fu_226_p2;
        zext_ln158_reg_302[5 : 2] <= zext_ln158_fu_221_p1[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln150_1_reg_284 <= {{i_0_reg_103[3:2]}};
        trunc_ln321_reg_289 <= trunc_ln321_fu_187_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln165_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_AddRoundKey_fu_143_roundKey_V_offset = 8'd40;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_AddRoundKey_fu_143_roundKey_V_offset = zext_ln158_reg_302;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_AddRoundKey_fu_143_roundKey_V_offset = 8'd0;
    end else begin
        grp_AddRoundKey_fu_143_roundKey_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_V_ce0 = 1'b1;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_V_address0 = zext_ln321_2_fu_266_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_V_address0 = zext_ln321_fu_202_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        state_V_address0 = grp_SubBytes_fu_158_state_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        state_V_address0 = grp_ShiftRows_fu_153_state_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_address0 = grp_AddRoundKey_fu_143_state_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_V_address0 = grp_MixColumns_fu_138_state_V_address0;
    end else begin
        state_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3))) begin
        state_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        state_V_ce0 = grp_SubBytes_fu_158_state_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        state_V_ce0 = grp_ShiftRows_fu_153_state_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_ce0 = grp_AddRoundKey_fu_143_state_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_V_ce0 = grp_MixColumns_fu_138_state_V_ce0;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        state_V_ce1 = grp_ShiftRows_fu_153_state_V_ce1;
    end else begin
        state_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_V_d0 = in_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        state_V_d0 = grp_SubBytes_fu_158_state_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        state_V_d0 = grp_ShiftRows_fu_153_state_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_d0 = grp_AddRoundKey_fu_143_state_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_V_d0 = grp_MixColumns_fu_138_state_V_d0;
    end else begin
        state_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_V_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        state_V_we0 = grp_SubBytes_fu_158_state_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        state_V_we0 = grp_ShiftRows_fu_153_state_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_we0 = grp_AddRoundKey_fu_143_state_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_V_we0 = grp_MixColumns_fu_138_state_V_we0;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        state_V_we1 = grp_ShiftRows_fu_153_state_V_we1;
    end else begin
        state_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        w_V_ce0 = grp_AddRoundKey_fu_143_roundKey_V_ce0;
    end else begin
        w_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln149_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_AddRoundKey_fu_143_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln154_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_SubBytes_fu_158_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_ShiftRows_fu_153_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_MixColumns_fu_138_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_AddRoundKey_fu_143_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_SubBytes_fu_158_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (grp_ShiftRows_fu_153_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_AddRoundKey_fu_143_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln165_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AddRoundKey_fu_143_ap_start = grp_AddRoundKey_fu_143_ap_start_reg;

assign grp_MixColumns_fu_138_ap_start = grp_MixColumns_fu_138_ap_start_reg;

assign grp_ShiftRows_fu_153_ap_start = grp_ShiftRows_fu_153_ap_start_reg;

assign grp_SubBytes_fu_158_ap_start = grp_SubBytes_fu_158_ap_start_reg;

assign i_1_fu_238_p2 = (i4_0_reg_126 + 5'd1);

assign i_fu_171_p2 = (i_0_reg_103 + 5'd1);

assign icmp_ln149_fu_165_p2 = ((i_0_reg_103 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_207_p2 = ((round_0_reg_114 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_232_p2 = ((i4_0_reg_126 == 5'd16) ? 1'b1 : 1'b0);

assign in_V_address0 = zext_ln150_fu_191_p1;

assign out_V_address0 = zext_ln166_fu_271_p1;

assign out_V_d0 = state_V_q0;

assign round_fu_226_p2 = (round_0_reg_114 + 4'd1);

assign shl_ln_fu_213_p3 = {{round_0_reg_114}, {2'd0}};

assign tmp_6_fu_196_p3 = {{trunc_ln321_reg_289}, {trunc_ln150_1_reg_284}};

assign tmp_8_fu_258_p3 = {{trunc_ln321_2_fu_254_p1}, {trunc_ln166_1_fu_244_p4}};

assign trunc_ln166_1_fu_244_p4 = {{i4_0_reg_126[3:2]}};

assign trunc_ln321_2_fu_254_p1 = i4_0_reg_126[1:0];

assign trunc_ln321_fu_187_p1 = i_0_reg_103[1:0];

assign w_V_address0 = grp_AddRoundKey_fu_143_roundKey_V_address0;

assign zext_ln150_fu_191_p1 = i_0_reg_103;

assign zext_ln158_fu_221_p1 = shl_ln_fu_213_p3;

assign zext_ln166_fu_271_p1 = i4_0_reg_126;

assign zext_ln321_2_fu_266_p1 = tmp_8_fu_258_p3;

assign zext_ln321_fu_202_p1 = tmp_6_fu_196_p3;

always @ (posedge ap_clk) begin
    zext_ln158_reg_302[1:0] <= 2'b00;
    zext_ln158_reg_302[7:6] <= 2'b00;
end

endmodule //Cipher
