// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] a_V;
input  [7:0] b_V;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] a_V_cast_fu_95_p1;
wire   [3:0] i_fu_105_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] select_ln56_fu_121_p3;
wire   [0:0] icmp_ln55_fu_99_p2;
wire   [7:0] select_ln56_1_fu_129_p3;
wire   [7:0] select_ln59_fu_157_p3;
wire   [7:0] zext_ln858_fu_175_p1;
reg   [7:0] agg_result_V_0_reg_44;
reg   [7:0] a_V_buf_0_reg_55;
reg   [7:0] b_V_buf_0_reg_64;
reg   [7:0] agg_result_V_load_reg_73;
reg   [3:0] i_0_reg_84;
wire   [0:0] trunc_ln55_fu_117_p1;
wire   [7:0] p_V_fu_111_p2;
wire   [7:0] shl_ln841_fu_145_p2;
wire   [0:0] hi_bit_fu_137_p3;
wire   [7:0] xor_ln719_fu_151_p2;
wire   [6:0] lshr_ln_fu_165_p4;
reg   [7:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if (((icmp_ln55_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= agg_result_V_0_reg_44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_buf_0_reg_55 <= select_ln59_fu_157_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_V_buf_0_reg_55 <= a_V_cast_fu_95_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_V_0_reg_44 <= select_ln56_fu_121_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        agg_result_V_0_reg_44 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_V_load_reg_73 <= select_ln56_1_fu_129_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        agg_result_V_load_reg_73 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_V_buf_0_reg_64 <= zext_ln858_fu_175_p1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_V_buf_0_reg_64 <= b_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_84 <= i_fu_105_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_84 <= 4'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln55_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = agg_result_V_0_reg_44;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln55_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_V_cast_fu_95_p1 = a_V;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign hi_bit_fu_137_p3 = a_V_buf_0_reg_55[32'd7];

assign i_fu_105_p2 = (i_0_reg_84 + 4'd1);

assign icmp_ln55_fu_99_p2 = ((i_0_reg_84 == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln_fu_165_p4 = {{b_V_buf_0_reg_64[7:1]}};

assign p_V_fu_111_p2 = (agg_result_V_load_reg_73 ^ a_V_buf_0_reg_55);

assign select_ln56_1_fu_129_p3 = ((trunc_ln55_fu_117_p1[0:0] === 1'b1) ? p_V_fu_111_p2 : agg_result_V_load_reg_73);

assign select_ln56_fu_121_p3 = ((trunc_ln55_fu_117_p1[0:0] === 1'b1) ? p_V_fu_111_p2 : agg_result_V_0_reg_44);

assign select_ln59_fu_157_p3 = ((hi_bit_fu_137_p3[0:0] === 1'b1) ? xor_ln719_fu_151_p2 : shl_ln841_fu_145_p2);

assign shl_ln841_fu_145_p2 = a_V_buf_0_reg_55 << 8'd1;

assign trunc_ln55_fu_117_p1 = b_V_buf_0_reg_64[0:0];

assign xor_ln719_fu_151_p2 = (shl_ln841_fu_145_p2 ^ 8'd27);

assign zext_ln858_fu_175_p1 = lshr_ln_fu_165_p4;

endmodule //gmul
