-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MixColumns is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_V_ce0 : OUT STD_LOGIC;
    state_V_we0 : OUT STD_LOGIC;
    state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of MixColumns is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_fu_164_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln99_fu_170_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln99_reg_397 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln97_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_180_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_406 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln99_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_fu_208_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_416 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_gmul_fu_102_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_102_ap_done : STD_LOGIC;
    signal grp_gmul_fu_109_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_109_ap_done : STD_LOGIC;
    signal grp_gmul_fu_116_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_116_ap_done : STD_LOGIC;
    signal grp_gmul_fu_123_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_123_ap_done : STD_LOGIC;
    signal grp_gmul_fu_130_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_130_ap_done : STD_LOGIC;
    signal grp_gmul_fu_137_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_137_ap_done : STD_LOGIC;
    signal grp_gmul_fu_144_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_144_ap_done : STD_LOGIC;
    signal grp_gmul_fu_151_ap_ready : STD_LOGIC;
    signal grp_gmul_fu_151_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ret_V_1_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_2_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_2_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_3_fu_310_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_3_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_fu_322_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_gmul_fu_102_ap_start : STD_LOGIC;
    signal grp_gmul_fu_102_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_102_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_109_ap_start : STD_LOGIC;
    signal grp_gmul_fu_109_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_109_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_116_ap_start : STD_LOGIC;
    signal grp_gmul_fu_116_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_116_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_123_ap_start : STD_LOGIC;
    signal grp_gmul_fu_123_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_123_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_130_ap_start : STD_LOGIC;
    signal grp_gmul_fu_130_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_130_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_137_ap_start : STD_LOGIC;
    signal grp_gmul_fu_137_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_137_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_144_ap_start : STD_LOGIC;
    signal grp_gmul_fu_144_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_144_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gmul_fu_151_ap_start : STD_LOGIC;
    signal grp_gmul_fu_151_ap_idle : STD_LOGIC;
    signal grp_gmul_fu_151_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_69 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln106_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_80 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r2_0_reg_91 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_gmul_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_109_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_123_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_137_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal grp_gmul_fu_151_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln321_1_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_3_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_1_fu_32 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_1_fu_36 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_2_fu_40 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_5_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_354_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_186_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln321_fu_194_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln321_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln1357_1_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_4_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_3_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_7_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_6_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_10_fu_304_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_9_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln321_2_fu_336_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln321_1_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_354_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component gmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (2 downto 0);
        b_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_top_mux_42_8_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_gmul_fu_102 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_102_ap_start,
        ap_done => grp_gmul_fu_102_ap_done,
        ap_idle => grp_gmul_fu_102_ap_idle,
        ap_ready => grp_gmul_fu_102_ap_ready,
        a_V => ap_const_lv3_2,
        b_V => lhs_V_1_fu_32,
        ap_return => grp_gmul_fu_102_ap_return);

    grp_gmul_fu_109 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_109_ap_start,
        ap_done => grp_gmul_fu_109_ap_done,
        ap_idle => grp_gmul_fu_109_ap_idle,
        ap_ready => grp_gmul_fu_109_ap_ready,
        a_V => ap_const_lv3_3,
        b_V => rhs_V_1_fu_36,
        ap_return => grp_gmul_fu_109_ap_return);

    grp_gmul_fu_116 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_116_ap_start,
        ap_done => grp_gmul_fu_116_ap_done,
        ap_idle => grp_gmul_fu_116_ap_idle,
        ap_ready => grp_gmul_fu_116_ap_ready,
        a_V => ap_const_lv3_2,
        b_V => rhs_V_1_fu_36,
        ap_return => grp_gmul_fu_116_ap_return);

    grp_gmul_fu_123 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_123_ap_start,
        ap_done => grp_gmul_fu_123_ap_done,
        ap_idle => grp_gmul_fu_123_ap_idle,
        ap_ready => grp_gmul_fu_123_ap_ready,
        a_V => ap_const_lv3_3,
        b_V => rhs_V_2_fu_40,
        ap_return => grp_gmul_fu_123_ap_return);

    grp_gmul_fu_130 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_130_ap_start,
        ap_done => grp_gmul_fu_130_ap_done,
        ap_idle => grp_gmul_fu_130_ap_idle,
        ap_ready => grp_gmul_fu_130_ap_ready,
        a_V => ap_const_lv3_2,
        b_V => rhs_V_2_fu_40,
        ap_return => grp_gmul_fu_130_ap_return);

    grp_gmul_fu_137 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_137_ap_start,
        ap_done => grp_gmul_fu_137_ap_done,
        ap_idle => grp_gmul_fu_137_ap_idle,
        ap_ready => grp_gmul_fu_137_ap_ready,
        a_V => ap_const_lv3_3,
        b_V => rhs_V_5_fu_44,
        ap_return => grp_gmul_fu_137_ap_return);

    grp_gmul_fu_144 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_144_ap_start,
        ap_done => grp_gmul_fu_144_ap_done,
        ap_idle => grp_gmul_fu_144_ap_idle,
        ap_ready => grp_gmul_fu_144_ap_ready,
        a_V => ap_const_lv3_3,
        b_V => lhs_V_1_fu_32,
        ap_return => grp_gmul_fu_144_ap_return);

    grp_gmul_fu_151 : component gmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gmul_fu_151_ap_start,
        ap_done => grp_gmul_fu_151_ap_done,
        ap_idle => grp_gmul_fu_151_ap_idle,
        ap_ready => grp_gmul_fu_151_ap_ready,
        a_V => ap_const_lv3_2,
        b_V => rhs_V_5_fu_44,
        ap_return => grp_gmul_fu_151_ap_return);

    aes_top_mux_42_8_bkb_U9 : component aes_top_mux_42_8_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => ret_V_reg_452,
        din1 => ret_V_1_reg_457,
        din2 => ret_V_2_reg_462,
        din3 => ret_V_3_reg_467,
        din4 => tmp_fu_354_p5,
        dout => tmp_fu_354_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_gmul_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_109_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_109_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_109_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_109_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_109_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_123_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_123_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_123_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_123_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_123_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_137_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_137_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_137_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_137_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_137_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gmul_fu_151_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gmul_fu_151_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gmul_fu_151_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gmul_fu_151_ap_ready = ap_const_logic_1)) then 
                    grp_gmul_fu_151_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_0_reg_69 <= c_reg_392;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_69 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r2_0_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                r2_0_reg_91 <= r_1_fu_322_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                r2_0_reg_91 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                r_0_reg_80 <= r_reg_406;
            elsif (((icmp_ln97_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_80 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_reg_392 <= c_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_reg_416 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                lhs_V_1_fu_32 <= state_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_406 <= r_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                ret_V_1_reg_457 <= ret_V_1_fu_278_p2;
                ret_V_2_reg_462 <= ret_V_2_fu_294_p2;
                ret_V_3_reg_467 <= ret_V_3_fu_310_p2;
                ret_V_reg_452 <= ret_V_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_reg_416 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                rhs_V_1_fu_36 <= state_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_reg_416 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                rhs_V_2_fu_40 <= state_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_reg_416 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                rhs_V_5_fu_44 <= state_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln321_reg_416 <= trunc_ln321_fu_208_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln99_reg_397(2 downto 0) <= zext_ln99_fu_170_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln99_reg_397(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln97_fu_158_p2, ap_CS_fsm_state3, icmp_ln99_fu_174_p2, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state6, icmp_ln106_fu_316_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln97_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln99_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln106_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln321_1_fu_340_p2 <= std_logic_vector(unsigned(zext_ln321_2_fu_336_p1) + unsigned(zext_ln99_reg_397));
    add_ln321_fu_198_p2 <= std_logic_vector(unsigned(zext_ln321_fu_194_p1) + unsigned(zext_ln99_reg_397));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state5_on_subcall_done_assign_proc : process(grp_gmul_fu_102_ap_done, grp_gmul_fu_109_ap_done, grp_gmul_fu_116_ap_done, grp_gmul_fu_123_ap_done, grp_gmul_fu_130_ap_done, grp_gmul_fu_137_ap_done, grp_gmul_fu_144_ap_done, grp_gmul_fu_151_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_gmul_fu_137_ap_done = ap_const_logic_0) or (grp_gmul_fu_130_ap_done = ap_const_logic_0) or (grp_gmul_fu_123_ap_done = ap_const_logic_0) or (grp_gmul_fu_116_ap_done = ap_const_logic_0) or (grp_gmul_fu_109_ap_done = ap_const_logic_0) or (grp_gmul_fu_102_ap_done = ap_const_logic_0) or (grp_gmul_fu_151_ap_done = ap_const_logic_0) or (grp_gmul_fu_144_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln97_fu_158_p2)
    begin
        if ((((icmp_ln97_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln97_fu_158_p2)
    begin
        if (((icmp_ln97_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_164_p2 <= std_logic_vector(unsigned(c_0_reg_69) + unsigned(ap_const_lv3_1));
    grp_gmul_fu_102_ap_start <= grp_gmul_fu_102_ap_start_reg;
    grp_gmul_fu_109_ap_start <= grp_gmul_fu_109_ap_start_reg;
    grp_gmul_fu_116_ap_start <= grp_gmul_fu_116_ap_start_reg;
    grp_gmul_fu_123_ap_start <= grp_gmul_fu_123_ap_start_reg;
    grp_gmul_fu_130_ap_start <= grp_gmul_fu_130_ap_start_reg;
    grp_gmul_fu_137_ap_start <= grp_gmul_fu_137_ap_start_reg;
    grp_gmul_fu_144_ap_start <= grp_gmul_fu_144_ap_start_reg;
    grp_gmul_fu_151_ap_start <= grp_gmul_fu_151_ap_start_reg;
    icmp_ln106_fu_316_p2 <= "1" when (r2_0_reg_91 = ap_const_lv3_4) else "0";
    icmp_ln97_fu_158_p2 <= "1" when (c_0_reg_69 = ap_const_lv3_4) else "0";
    icmp_ln99_fu_174_p2 <= "1" when (r_0_reg_80 = ap_const_lv3_4) else "0";
    r_1_fu_322_p2 <= std_logic_vector(unsigned(r2_0_reg_91) + unsigned(ap_const_lv3_1));
    r_fu_180_p2 <= std_logic_vector(unsigned(r_0_reg_80) + unsigned(ap_const_lv3_1));
    ret_V_1_fu_278_p2 <= (xor_ln1357_4_fu_272_p2 xor xor_ln1357_3_fu_268_p2);
    ret_V_2_fu_294_p2 <= (xor_ln1357_7_fu_288_p2 xor xor_ln1357_6_fu_284_p2);
    ret_V_3_fu_310_p2 <= (xor_ln1357_9_fu_300_p2 xor xor_ln1357_10_fu_304_p2);
    ret_V_fu_262_p2 <= (xor_ln1357_fu_252_p2 xor xor_ln1357_1_fu_258_p2);

    state_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln321_1_fu_203_p1, zext_ln321_3_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_address0 <= zext_ln321_3_fu_345_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_address0 <= zext_ln321_1_fu_203_p1(4 - 1 downto 0);
        else 
            state_V_address0 <= "XXXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_V_ce0 <= ap_const_logic_1;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_d0 <= tmp_fu_354_p6;

    state_V_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln106_fu_316_p2)
    begin
        if (((icmp_ln106_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_V_we0 <= ap_const_logic_1;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_186_p3 <= (r_0_reg_80 & ap_const_lv2_0);
    tmp_5_fu_328_p3 <= (r2_0_reg_91 & ap_const_lv2_0);
    tmp_fu_354_p5 <= r2_0_reg_91(2 - 1 downto 0);
    trunc_ln321_fu_208_p1 <= r_0_reg_80(2 - 1 downto 0);
    xor_ln1357_10_fu_304_p2 <= (grp_gmul_fu_151_ap_return xor grp_gmul_fu_144_ap_return);
    xor_ln1357_1_fu_258_p2 <= (rhs_V_5_fu_44 xor rhs_V_2_fu_40);
    xor_ln1357_3_fu_268_p2 <= (rhs_V_5_fu_44 xor lhs_V_1_fu_32);
    xor_ln1357_4_fu_272_p2 <= (grp_gmul_fu_123_ap_return xor grp_gmul_fu_116_ap_return);
    xor_ln1357_6_fu_284_p2 <= (rhs_V_1_fu_36 xor lhs_V_1_fu_32);
    xor_ln1357_7_fu_288_p2 <= (grp_gmul_fu_137_ap_return xor grp_gmul_fu_130_ap_return);
    xor_ln1357_9_fu_300_p2 <= (rhs_V_2_fu_40 xor rhs_V_1_fu_36);
    xor_ln1357_fu_252_p2 <= (grp_gmul_fu_109_ap_return xor grp_gmul_fu_102_ap_return);
    zext_ln321_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_198_p2),64));
    zext_ln321_2_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_328_p3),6));
    zext_ln321_3_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_340_p2),64));
    zext_ln321_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_186_p3),6));
    zext_ln99_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_69),6));
end behav;
