-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_V_ce0 : OUT STD_LOGIC;
    w_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln150_1_reg_284 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln149_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_fu_187_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_289 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln158_fu_221_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln158_reg_302 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal round_fu_226_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_315 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln165_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_V_ce0 : STD_LOGIC;
    signal state_V_we0 : STD_LOGIC;
    signal state_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_V_ce1 : STD_LOGIC;
    signal state_V_we1 : STD_LOGIC;
    signal state_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MixColumns_fu_138_ap_start : STD_LOGIC;
    signal grp_MixColumns_fu_138_ap_done : STD_LOGIC;
    signal grp_MixColumns_fu_138_ap_idle : STD_LOGIC;
    signal grp_MixColumns_fu_138_ap_ready : STD_LOGIC;
    signal grp_MixColumns_fu_138_state_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MixColumns_fu_138_state_V_ce0 : STD_LOGIC;
    signal grp_MixColumns_fu_138_state_V_we0 : STD_LOGIC;
    signal grp_MixColumns_fu_138_state_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_143_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_ap_done : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_state_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_143_state_V_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_state_V_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_state_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_143_roundKey_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AddRoundKey_fu_143_roundKey_V_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_143_roundKey_V_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ShiftRows_fu_153_ap_start : STD_LOGIC;
    signal grp_ShiftRows_fu_153_ap_done : STD_LOGIC;
    signal grp_ShiftRows_fu_153_ap_idle : STD_LOGIC;
    signal grp_ShiftRows_fu_153_ap_ready : STD_LOGIC;
    signal grp_ShiftRows_fu_153_state_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ShiftRows_fu_153_state_V_ce0 : STD_LOGIC;
    signal grp_ShiftRows_fu_153_state_V_we0 : STD_LOGIC;
    signal grp_ShiftRows_fu_153_state_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ShiftRows_fu_153_state_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ShiftRows_fu_153_state_V_ce1 : STD_LOGIC;
    signal grp_ShiftRows_fu_153_state_V_we1 : STD_LOGIC;
    signal grp_ShiftRows_fu_153_state_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_SubBytes_fu_158_ap_start : STD_LOGIC;
    signal grp_SubBytes_fu_158_ap_done : STD_LOGIC;
    signal grp_SubBytes_fu_158_ap_idle : STD_LOGIC;
    signal grp_SubBytes_fu_158_ap_ready : STD_LOGIC;
    signal grp_SubBytes_fu_158_state_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SubBytes_fu_158_state_V_ce0 : STD_LOGIC;
    signal grp_SubBytes_fu_158_state_V_we0 : STD_LOGIC;
    signal grp_SubBytes_fu_158_state_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_103 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal round_0_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i4_0_reg_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_MixColumns_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_AddRoundKey_fu_143_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_ShiftRows_fu_153_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_SubBytes_fu_158_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln154_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln150_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_2_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_196_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_213_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln321_2_fu_254_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln166_1_fu_244_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_258_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component MixColumns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        roundKey_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        roundKey_V_ce0 : OUT STD_LOGIC;
        roundKey_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        roundKey_V_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShiftRows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_V_ce1 : OUT STD_LOGIC;
        state_V_we1 : OUT STD_LOGIC;
        state_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SubBytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Cipher_state_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    state_V_U : component Cipher_state_V
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_V_address0,
        ce0 => state_V_ce0,
        we0 => state_V_we0,
        d0 => state_V_d0,
        q0 => state_V_q0,
        address1 => grp_ShiftRows_fu_153_state_V_address1,
        ce1 => state_V_ce1,
        we1 => state_V_we1,
        d1 => grp_ShiftRows_fu_153_state_V_d1,
        q1 => state_V_q1);

    grp_MixColumns_fu_138 : component MixColumns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MixColumns_fu_138_ap_start,
        ap_done => grp_MixColumns_fu_138_ap_done,
        ap_idle => grp_MixColumns_fu_138_ap_idle,
        ap_ready => grp_MixColumns_fu_138_ap_ready,
        state_V_address0 => grp_MixColumns_fu_138_state_V_address0,
        state_V_ce0 => grp_MixColumns_fu_138_state_V_ce0,
        state_V_we0 => grp_MixColumns_fu_138_state_V_we0,
        state_V_d0 => grp_MixColumns_fu_138_state_V_d0,
        state_V_q0 => state_V_q0);

    grp_AddRoundKey_fu_143 : component AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_fu_143_ap_start,
        ap_done => grp_AddRoundKey_fu_143_ap_done,
        ap_idle => grp_AddRoundKey_fu_143_ap_idle,
        ap_ready => grp_AddRoundKey_fu_143_ap_ready,
        state_V_address0 => grp_AddRoundKey_fu_143_state_V_address0,
        state_V_ce0 => grp_AddRoundKey_fu_143_state_V_ce0,
        state_V_we0 => grp_AddRoundKey_fu_143_state_V_we0,
        state_V_d0 => grp_AddRoundKey_fu_143_state_V_d0,
        state_V_q0 => state_V_q0,
        roundKey_V_address0 => grp_AddRoundKey_fu_143_roundKey_V_address0,
        roundKey_V_ce0 => grp_AddRoundKey_fu_143_roundKey_V_ce0,
        roundKey_V_q0 => w_V_q0,
        roundKey_V_offset => grp_AddRoundKey_fu_143_roundKey_V_offset);

    grp_ShiftRows_fu_153 : component ShiftRows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ShiftRows_fu_153_ap_start,
        ap_done => grp_ShiftRows_fu_153_ap_done,
        ap_idle => grp_ShiftRows_fu_153_ap_idle,
        ap_ready => grp_ShiftRows_fu_153_ap_ready,
        state_V_address0 => grp_ShiftRows_fu_153_state_V_address0,
        state_V_ce0 => grp_ShiftRows_fu_153_state_V_ce0,
        state_V_we0 => grp_ShiftRows_fu_153_state_V_we0,
        state_V_d0 => grp_ShiftRows_fu_153_state_V_d0,
        state_V_q0 => state_V_q0,
        state_V_address1 => grp_ShiftRows_fu_153_state_V_address1,
        state_V_ce1 => grp_ShiftRows_fu_153_state_V_ce1,
        state_V_we1 => grp_ShiftRows_fu_153_state_V_we1,
        state_V_d1 => grp_ShiftRows_fu_153_state_V_d1,
        state_V_q1 => state_V_q1);

    grp_SubBytes_fu_158 : component SubBytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SubBytes_fu_158_ap_start,
        ap_done => grp_SubBytes_fu_158_ap_done,
        ap_idle => grp_SubBytes_fu_158_ap_idle,
        ap_ready => grp_SubBytes_fu_158_ap_ready,
        state_V_address0 => grp_SubBytes_fu_158_state_V_address0,
        state_V_ce0 => grp_SubBytes_fu_158_state_V_ce0,
        state_V_we0 => grp_SubBytes_fu_158_state_V_we0,
        state_V_d0 => grp_SubBytes_fu_158_state_V_d0,
        state_V_q0 => state_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AddRoundKey_fu_143_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddRoundKey_fu_143_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((icmp_ln149_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_AddRoundKey_fu_143_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_143_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_fu_143_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MixColumns_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MixColumns_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_MixColumns_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MixColumns_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_MixColumns_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ShiftRows_fu_153_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ShiftRows_fu_153_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_ShiftRows_fu_153_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ShiftRows_fu_153_ap_ready = ap_const_logic_1)) then 
                    grp_ShiftRows_fu_153_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SubBytes_fu_158_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SubBytes_fu_158_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln154_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln154_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_SubBytes_fu_158_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SubBytes_fu_158_ap_ready = ap_const_logic_1)) then 
                    grp_SubBytes_fu_158_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i4_0_reg_126 <= i_1_reg_315;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_AddRoundKey_fu_143_ap_done = ap_const_logic_1))) then 
                i4_0_reg_126 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_103 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_103 <= i_reg_279;
            end if; 
        end if;
    end process;

    round_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_AddRoundKey_fu_143_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    round_0_reg_114 <= round_reg_307;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    round_0_reg_114 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_1_reg_315 <= i_1_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_279 <= i_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                round_reg_307 <= round_fu_226_p2;
                    zext_ln158_reg_302(5 downto 2) <= zext_ln158_fu_221_p1(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln149_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln150_1_reg_284 <= i_0_reg_103(3 downto 2);
                trunc_ln321_reg_289 <= trunc_ln321_fu_187_p1;
            end if;
        end if;
    end process;
    zext_ln158_reg_302(1 downto 0) <= "00";
    zext_ln158_reg_302(7 downto 6) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln149_fu_165_p2, ap_CS_fsm_state18, icmp_ln165_fu_232_p2, grp_MixColumns_fu_138_ap_done, grp_AddRoundKey_fu_143_ap_done, grp_ShiftRows_fu_153_ap_done, grp_SubBytes_fu_158_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state5, icmp_ln154_fu_207_p2, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln149_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_AddRoundKey_fu_143_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln154_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_SubBytes_fu_158_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_ShiftRows_fu_153_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_MixColumns_fu_138_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_AddRoundKey_fu_143_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_SubBytes_fu_158_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_ShiftRows_fu_153_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_AddRoundKey_fu_143_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln165_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18, icmp_ln165_fu_232_p2)
    begin
        if ((((icmp_ln165_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, icmp_ln165_fu_232_p2)
    begin
        if (((icmp_ln165_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddRoundKey_fu_143_ap_start <= grp_AddRoundKey_fu_143_ap_start_reg;

    grp_AddRoundKey_fu_143_roundKey_V_offset_assign_proc : process(zext_ln158_reg_302, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_AddRoundKey_fu_143_roundKey_V_offset <= ap_const_lv8_28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_AddRoundKey_fu_143_roundKey_V_offset <= zext_ln158_reg_302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_AddRoundKey_fu_143_roundKey_V_offset <= ap_const_lv8_0;
        else 
            grp_AddRoundKey_fu_143_roundKey_V_offset <= "XXXXXXXX";
        end if; 
    end process;

    grp_MixColumns_fu_138_ap_start <= grp_MixColumns_fu_138_ap_start_reg;
    grp_ShiftRows_fu_153_ap_start <= grp_ShiftRows_fu_153_ap_start_reg;
    grp_SubBytes_fu_158_ap_start <= grp_SubBytes_fu_158_ap_start_reg;
    i_1_fu_238_p2 <= std_logic_vector(unsigned(i4_0_reg_126) + unsigned(ap_const_lv5_1));
    i_fu_171_p2 <= std_logic_vector(unsigned(i_0_reg_103) + unsigned(ap_const_lv5_1));
    icmp_ln149_fu_165_p2 <= "1" when (i_0_reg_103 = ap_const_lv5_10) else "0";
    icmp_ln154_fu_207_p2 <= "1" when (round_0_reg_114 = ap_const_lv4_A) else "0";
    icmp_ln165_fu_232_p2 <= "1" when (i4_0_reg_126 = ap_const_lv5_10) else "0";
    in_V_address0 <= zext_ln150_fu_191_p1(4 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_address0 <= zext_ln166_fu_271_p1(4 - 1 downto 0);

    out_V_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_d0 <= state_V_q0;

    out_V_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    round_fu_226_p2 <= std_logic_vector(unsigned(round_0_reg_114) + unsigned(ap_const_lv4_1));
    shl_ln_fu_213_p3 <= (round_0_reg_114 & ap_const_lv2_0);

    state_V_address0_assign_proc : process(ap_CS_fsm_state18, grp_MixColumns_fu_138_state_V_address0, grp_AddRoundKey_fu_143_state_V_address0, grp_ShiftRows_fu_153_state_V_address0, grp_SubBytes_fu_158_state_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state13, zext_ln321_fu_202_p1, zext_ln321_2_fu_266_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_V_address0 <= zext_ln321_2_fu_266_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_address0 <= zext_ln321_fu_202_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_V_address0 <= grp_SubBytes_fu_158_state_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_V_address0 <= grp_ShiftRows_fu_153_state_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_address0 <= grp_AddRoundKey_fu_143_state_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_address0 <= grp_MixColumns_fu_138_state_V_address0;
        else 
            state_V_address0 <= "XXXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_CS_fsm_state18, grp_MixColumns_fu_138_state_V_ce0, grp_AddRoundKey_fu_143_state_V_ce0, grp_ShiftRows_fu_153_state_V_ce0, grp_SubBytes_fu_158_state_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_V_ce0 <= grp_SubBytes_fu_158_state_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_V_ce0 <= grp_ShiftRows_fu_153_state_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_ce0 <= grp_AddRoundKey_fu_143_state_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_ce0 <= grp_MixColumns_fu_138_state_V_ce0;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_ce1_assign_proc : process(grp_ShiftRows_fu_153_state_V_ce1, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_V_ce1 <= grp_ShiftRows_fu_153_state_V_ce1;
        else 
            state_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_d0_assign_proc : process(in_V_q0, grp_MixColumns_fu_138_state_V_d0, grp_AddRoundKey_fu_143_state_V_d0, grp_ShiftRows_fu_153_state_V_d0, grp_SubBytes_fu_158_state_V_d0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_d0 <= in_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_V_d0 <= grp_SubBytes_fu_158_state_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_V_d0 <= grp_ShiftRows_fu_153_state_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_d0 <= grp_AddRoundKey_fu_143_state_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_d0 <= grp_MixColumns_fu_138_state_V_d0;
        else 
            state_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_V_we0_assign_proc : process(grp_MixColumns_fu_138_state_V_we0, grp_AddRoundKey_fu_143_state_V_we0, grp_ShiftRows_fu_153_state_V_we0, grp_SubBytes_fu_158_state_V_we0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_V_we0 <= grp_SubBytes_fu_158_state_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_V_we0 <= grp_ShiftRows_fu_153_state_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_we0 <= grp_AddRoundKey_fu_143_state_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_we0 <= grp_MixColumns_fu_138_state_V_we0;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_we1_assign_proc : process(grp_ShiftRows_fu_153_state_V_we1, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_V_we1 <= grp_ShiftRows_fu_153_state_V_we1;
        else 
            state_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_196_p3 <= (trunc_ln321_reg_289 & trunc_ln150_1_reg_284);
    tmp_8_fu_258_p3 <= (trunc_ln321_2_fu_254_p1 & trunc_ln166_1_fu_244_p4);
    trunc_ln166_1_fu_244_p4 <= i4_0_reg_126(3 downto 2);
    trunc_ln321_2_fu_254_p1 <= i4_0_reg_126(2 - 1 downto 0);
    trunc_ln321_fu_187_p1 <= i_0_reg_103(2 - 1 downto 0);
    w_V_address0 <= grp_AddRoundKey_fu_143_roundKey_V_address0;

    w_V_ce0_assign_proc : process(grp_AddRoundKey_fu_143_roundKey_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            w_V_ce0 <= grp_AddRoundKey_fu_143_roundKey_V_ce0;
        else 
            w_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln150_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_103),64));
    zext_ln158_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_213_p3),8));
    zext_ln166_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_126),64));
    zext_ln321_2_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_258_p3),64));
    zext_ln321_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_196_p3),64));
end behav;
