-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (2 downto 0);
    b_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of gmul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_V_cast_fu_95_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_105_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln56_fu_121_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln55_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_1_fu_129_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln59_fu_157_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln858_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_V_0_reg_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_buf_0_reg_55 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_buf_0_reg_64 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_V_load_reg_73 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln55_fu_117_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_V_fu_111_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_fu_145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal hi_bit_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_fu_151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_165_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((icmp_ln55_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= agg_result_V_0_reg_44;
                end if; 
            end if;
        end if;
    end process;


    a_V_buf_0_reg_55_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_V_buf_0_reg_55 <= select_ln59_fu_157_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_V_buf_0_reg_55 <= a_V_cast_fu_95_p1;
            end if; 
        end if;
    end process;

    agg_result_V_0_reg_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                agg_result_V_0_reg_44 <= select_ln56_fu_121_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                agg_result_V_0_reg_44 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    agg_result_V_load_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                agg_result_V_load_reg_73 <= select_ln56_1_fu_129_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                agg_result_V_load_reg_73 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    b_V_buf_0_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_V_buf_0_reg_64 <= zext_ln858_fu_175_p1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b_V_buf_0_reg_64 <= b_V;
            end if; 
        end if;
    end process;

    i_0_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_84 <= i_fu_105_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_84 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln55_fu_99_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln55_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_V_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V),8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln55_fu_99_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln55_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln55_fu_99_p2)
    begin
        if (((icmp_ln55_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, icmp_ln55_fu_99_p2, agg_result_V_0_reg_44, ap_return_preg)
    begin
        if (((icmp_ln55_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= agg_result_V_0_reg_44;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    hi_bit_fu_137_p3 <= a_V_buf_0_reg_55(7 downto 7);
    i_fu_105_p2 <= std_logic_vector(unsigned(i_0_reg_84) + unsigned(ap_const_lv4_1));
    icmp_ln55_fu_99_p2 <= "1" when (i_0_reg_84 = ap_const_lv4_8) else "0";
    lshr_ln_fu_165_p4 <= b_V_buf_0_reg_64(7 downto 1);
    p_V_fu_111_p2 <= (agg_result_V_load_reg_73 xor a_V_buf_0_reg_55);
    select_ln56_1_fu_129_p3 <= 
        p_V_fu_111_p2 when (trunc_ln55_fu_117_p1(0) = '1') else 
        agg_result_V_load_reg_73;
    select_ln56_fu_121_p3 <= 
        p_V_fu_111_p2 when (trunc_ln55_fu_117_p1(0) = '1') else 
        agg_result_V_0_reg_44;
    select_ln59_fu_157_p3 <= 
        xor_ln719_fu_151_p2 when (hi_bit_fu_137_p3(0) = '1') else 
        shl_ln841_fu_145_p2;
    shl_ln841_fu_145_p2 <= std_logic_vector(shift_left(unsigned(a_V_buf_0_reg_55),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    trunc_ln55_fu_117_p1 <= b_V_buf_0_reg_64(1 - 1 downto 0);
    xor_ln719_fu_151_p2 <= (shl_ln841_fu_145_p2 xor ap_const_lv8_1B);
    zext_ln858_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_165_p4),8));
end behav;
